python,BAN-B101,Assert statement used outside of tests,major,security,"Usage of `assert` statement in application logic is discouraged. `assert` is removed with compiling to optimised byte code (`python -o` producing *.pyo files). Consider raising an exception instead. Ideally, `assert` statement should be used only in tests."
python,BAN-B103,Insecure permissions set on a file,major,security,"Files should be created with restrictive file permissions to prevent vulnerabilities such as information disclosure and code execution. In particular, any files which may contain confidential information should be set to only permit access by the owning user/service and group (i.e. no world/other access).

Discretion should be used when granting write access to files such as configuration files to prevent vulnerabilities including denial of service and remote code execution.

Read more information on how to set file permissions and importance of file system security [here](https://linuxsecurity.com/docs/SecurityAdminGuide/SecurityAdminGuide-8.html)."
python,BAN-B104,Binding to all interfaces detected with hardcoded values,major,security,"Binding to all network interfaces can potentially open up a service to traffic on unintended interfaces, that may not be properly documented or secured. This can be prevented by changing the code so it explicitly only allows access from localhost.

Correct code:

```
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.bind(('127.0.0.1', 31137))
```

```
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.bind(('192.168.0.1', 31137))
```

Insecure code:

```
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.bind(('0.0.0.0, 31137))
```"
python,BAN-B105,Potential hardcoded credential detected,major,security,Potential hardcoded credential. Sensitive information like password shouldn't be hardcoded. Use an environment variable instead.
python,BAN-B106,Potential hardcoded credential detected as function argument,major,security,Potential hardcoded credential as function argument. Sensitive information like password shouldn't be hardcoded in a function argument. Pick it from an environment variable instead.
python,BAN-B107,Potential hardcoded credential detected as default function argument,major,security,"Potential hardcoded credential as default function argument. Sensitive information like password shouldn't be hardcoded in a function argument. Pick it from an environment variable instead.
"
python,BAN-B108,Hardcoded temporary directory detected,major,security,"Hardcoded temp directory. Prefer using `tmpfile` - [https://docs.python.org/3.7/library/tempfile.html](https://docs.python.org/3.7/library/tempfile.html)

Malicious users that can predict the file name and write to directory containing the temporary file can effectively hijack the temporary file by creating a symlink with the name of the temporary file before the program creates the file itself. This allows a malicious user to supply malicious data or cause actions by the program to affect attacker chosen files.
"
python,BAN-B201,Flask app detected with DEBUG mode enabled,critical,security,Running Flask applications in debug mode results in the Werkzeug debugger being enabled. This includes a feature that allows arbitrary code execution. Documentation for both Flask and Werkzeug strongly suggests that debug mode should never be enabled on production systems.
python,BAN-B301,Audit required: Use of `pickle` module,major,security,The pickle module is not secure against erroneous or maliciously constructed data. Never unpickle data received from an untrusted or unauthenticated source.
python,BAN-B302,Audit required: Use of `marshal` module,major,security,The marshal module is not intended to be secure against erroneous or maliciously constructed data. Never unmarshal data received from an untrusted or unauthenticated source.
python,BAN-B306,Use of deprecated function: `mktemp`,major,security,"Use of insecure and deprecated function `mktemp()`. Use of this function may introduce a security hole in your program. By the time you get around to doing anything with the file name it returns, someone else may have beaten you to the punch. Use `mkstemp()` instead. [Read more](https://docs.python.org/2/library/tempfile.html#tempfile.mkstemp)."
python,BAN-B308,Audit required: Use of `mark_safe` detected,major,security,Use of `mark_safe()` may expose cross-site scripting vulnerabilities and should be reviewed.
python,BAN-B309,Use of `HTTPSConnection` may not be secure in Python versions < 2.7.9,major,security,"Use of `HTTPSConnection` on older versions of Python prior to 2.7.9 and 3.4.3 does not provide many of the assurances one would expect when using SSL and leaves connections open to potential man-in-the-middle attacks.

A secure SSL session relies on validation of a `X.509 certificate`. Basic checks include:
- Certificate Authority trust verification
- Certificate revocation status
- Certificate expiration
- Certificate subject name matching

The `HTTPSConnection` class is used in a large number of locations and fails to check that certificates are signed by a valid authority. Without that check in place, the subsequent checks (some highlighted above) are largely invalid. The result is that an attacker who has access to the network traffic between two endpoints relying on HTTPSConnection can trivially create a certificate that will be accepted by HTTPSConnection as valid - allowing the attacker to intercept, read and modify traffic that should be encrypted by SSL.

Please see [this report](https://wiki.openstack.org/wiki/OSSN/OSSN-0033) for details."
python,BAN-B310,Audit required: Use of `urllib.urlopen` detected,major,security,"`urlib` not only opens http:// or https:// URLs, but also ftp:// and file://. With this it might be possible to open local files on the executing machine which might be a security risk if the URL to open can be manipulated by an external user.

Correct way:

```
# Validate URL before opening it
if url.lower().startswith('http'):
  req = urllib.Request.request(url)
else
  raise ValueError from None

with urllib.request.urlopen(req) as resp:
  [...]
```"
python,BAN-B311,Audit required: Use of `random` detected,minor,security,Standard pseudo-random generators are not suitable for security/cryptographic purposes. Consider using `secrets` to generate secure random numbers. [Read more](https://docs.python.org/3/library/secrets.html).
python,BAN-B312,Audie required: Use of telnet detected,major,security,Telnet-related functions are being called. Telnet is considered insecure. Use SSH or some other encrypted protocol.
python,BAN-B313,xml_bad_cElementTree,major,security,Using various XML methods to parse untrusted XML data is known to be vulnerable to XML attacks. Using the [defusedxml](https://pypi.org/project/defusedxml) module is recommended. Methods should be replaced with their `defusedxml` equivalents.
python,BAN-B314,xml_bad_ElementTree,major,security,Using various XML methods to parse untrusted XML data is known to be vulnerable to XML attacks. Using the [defusedxml](https://pypi.org/project/defusedxml) module is recommended. Methods should be replaced with their `defusedxml` equivalents.
python,BAN-B315,xml_bad_expatreader,major,security,Using various XML methods to parse untrusted XML data is known to be vulnerable to XML attacks. Using the [defusedxml](https://pypi.org/project/defusedxml) module is recommended. Methods should be replaced with their `defusedxml` equivalents.
python,BAN-B316,xml_bad_expatbuilder,major,security,Using various XML methods to parse untrusted XML data is known to be vulnerable to XML attacks. Using the [defusedxml](https://pypi.org/project/defusedxml) module is recommended. Methods should be replaced with their `defusedxml` equivalents.
python,BAN-B317,xml_bad_sax,major,security,Using various XML methods to parse untrusted XML data is known to be vulnerable to XML attacks. Using the [defusedxml](https://pypi.org/project/defusedxml) module is recommended. Methods should be replaced with their `defusedxml` equivalents.
python,BAN-B318,xml_bad_minidom,major,security,Using various XML methods to parse untrusted XML data is known to be vulnerable to XML attacks. Using the [defusedxml](https://pypi.org/project/defusedxml) module is recommended. Methods should be replaced with their `defusedxml` equivalents.
python,BAN-B319,xml_bad_pulldom,major,security,Using various XML methods to parse untrusted XML data is known to be vulnerable to XML attacks. Using the [defusedxml](https://pypi.org/project/defusedxml) module is recommended. Methods should be replaced with their `defusedxml` equivalents.
python,BAN-B320,xml_bad_etree,major,security,Using various XML methods to parse untrusted XML data is known to be vulnerable to XML attacks. Using the [defusedxml](https://pypi.org/project/defusedxml) module is recommended. Methods should be replaced with their `defusedxml` equivalents.
python,BAN-B321,ftplib,major,security,FTP-related functions are being called. FTP is considered insecure. Use SSH/SFTP/SCP or some other encrypted protocol.
python,BAN-B322,input,major,security,"The input method in Python 2 will read from standard input, evaluate and run the resulting string as python source code. This is similar, though in many ways worse, then using `eval`. On Python 2, use `raw_input` instead, `input` is safe in Python 3."
python,BAN-B323,unverified_context,major,security,"By default, Python will create a secure, verified ssl context for use in such classes as `HTTPSConnection`. However, it still allows using an insecure context via the `_create_unverified_context` that reverts to the previous behavior that does not validate certificates or perform hostname checks."
python,BAN-B324,hashlib_new_insecure_functions,major,security,"Use of insecure MD2, MD4, MD5, or SHA1 hash functions should be avoided. Using more secure algorithms like SHA256 or SHA512."
python,BAN-B325,tempnam,major,security,Use of `os.tempnam()` and `os.tmpnam()` is vulnerable to symlink attacks. Consider using `tmpfile()` instead.
python,BAN-B401,import_telnetlib,major,security,A telnet-related module is being imported. Telnet is considered insecure. Use SSH or some other encrypted protocol.
python,BAN-B402,import_ftplib,major,security,A FTP-related module is being imported. FTP is considered insecure. Use SSH/SFTP/SCP or some other encrypted protocol.
python,BAN-B403,import_pickle,minor,security,"Consider possible security implications associated with these modules: `pickle`, `cPickle`, `dill`."
python,BAN-B404,import_subprocess,minor,security,Consider possible security implications associated with the `subprocess` module.
python,BAN-B405,import_xml_etree,minor,security,"Using various methods to parse untrusted XML data is known to be vulnerable to XML attacks. Replace vulnerable imports with the equivalent [defusedxml](https://pypi.org/project/defusedxml) package, or make sure `defusedxml.defuse_stdlib()` is called."
python,BAN-B406,import_xml_sax,minor,security,"Using various methods to parse untrusted XML data is known to be vulnerable to XML attacks. Replace vulnerable imports with the equivalent [defusedxml](https://pypi.org/project/defusedxml) package, or make sure `defusedxml.defuse_stdlib()` is called."
python,BAN-B407,import_xml_expat,minor,security,"Using various methods to parse untrusted XML data is known to be vulnerable to XML attacks. Replace vulnerable imports with the equivalent [defusedxml](https://pypi.org/project/defusedxml) package, or make sure `defusedxml.defuse_stdlib()` is called."
python,BAN-B408,import_xml_minidom,minor,security,"Using various methods to parse untrusted XML data is known to be vulnerable to XML attacks. Replace vulnerable imports with the equivalent [defusedxml](https://pypi.org/project/defusedxml) package, or make sure `defusedxml.defuse_stdlib()` is called."
python,BAN-B409,import_xml_pulldom,minor,security,"Using various methods to parse untrusted XML data is known to be vulnerable to XML attacks. Replace vulnerable imports with the equivalent [defusedxml](https://pypi.org/project/defusedxml) package, or make sure `defusedxml.defuse_stdlib()` is called."
python,BAN-B410,import_lxml,minor,security,Using various methods to parse untrusted XML data is known to be vulnerable to XML attacks. Replace vulnerable imports with the equivalent [defusedxml](https://pypi.org/project/defusedxml) package.
python,BAN-B411,import_xmlrpclib,major,security,XMLRPC is particularly dangerous as it is also concerned with communicating data over a network. Use `defused.xmlrpc.monkey_patch()` function to monkey-patch xmlrpclib and mitigate remote XML attacks.
python,BAN-B412,import_httpoxy,major,security,"httpoxy is a set of vulnerabilities that affect application code running in CGI, or CGI-like environments. The use of CGI for web applications should be avoided to prevent this class of attack. More details are available at [httpoxy.org](https://httpoxy.org/)."
python,BAN-B413,import_pycrypto,major,security,pycrypto library is known to have publicly disclosed [buffer overflow vulnerability](https://github.com/dlitz/pycrypto/issues/176). It is no longer actively maintained and has been deprecated in favor of pyca/cryptography library.
python,BAN-B414,import_pycryptodome,major,security,"pycryptodome is a direct fork of pycrypto that has not fully addressed the issues inherent in PyCrypto. It seems to exist, mainly, as an API compatible continuation of pycrypto and should be deprecated in favor of pyca/cryptography which has more support among the Python community."
python,BAN-B501,request_with_no_cert_validation,major,security,Encryption in general is typically critical to the security of many applications. Using TLS can greatly increase security by guaranteeing the identity of the party you are communicating with. This is accomplished by one or both parties presenting trusted certificates during the connection initialization phase of TLS.
python,BAN-B502,ssl_with_bad_version,major,security,"Several highly publicized exploitable flaws have been discovered in all versions of SSL and early versions of TLS. It is strongly recommended that use of the following known broken protocol versions be avoided:

 - SSL v2
 - SSL v3
 - TLS v1
 - TLS v1.1"
python,BAN-B503,ssl_with_bad_defaults,minor,security,"Several highly publicized exploitable flaws have been discovered in all versions of SSL and early versions of TLS. It is strongly recommended that use of the following known broken protocol versions be avoided:

 - SSL v2
 - SSL v3
 - TLS v1
 - TLS v1.1"
python,BAN-B504,ssl_with_no_version,minor,security,"Several highly publicized exploitable flaws have been discovered in all versions of SSL and early versions of TLS. It is strongly recommended that use of the following known broken protocol versions be avoided:

 - SSL v2
 - SSL v3
 - TLS v1
 - TLS v1.1"
python,BAN-B505,weak_cryptographic_key,major,security,"As computational power increases, so does the ability to break ciphers with smaller key lengths. The recommended key length size for RSA and DSA algorithms is 2048 and higher. 1024 bits and below are now considered breakable. EC key length sizes are recommended to be 224 and higher with 160 and below considered breakable."
python,BAN-B506,yaml_load,minor,security,"The yaml.load function provides the ability to construct an arbitrary Python object, which may be dangerous if you receive a YAML document from an untrusted source. The function `yaml.safe_load` limits this ability to simple Python objects like integers or lists."
python,BAN-B507,ssh_no_host_key_verification,major,security,"Encryption in general is typically critical to the security of many applications. Using SSH can greatly increase security by guaranteeing the identity of the party you are communicating with. This is accomplished by one or both parties presenting trusted host keys during the connection initialization phase of SSH.

When paramiko methods are used, host keys are verified by default."
python,BAN-B601,paramiko_calls,major,security,Paramiko is a Python library designed to work with the SSH2 protocol for secure (encrypted and authenticated) connections to remote machines. It is intended to run commands on a remote host. These commands are run within a shell on the target and are thus vulnerable to various shell injection attacks. Use of Paramiko’s “exec_command” or “invoke_shell” methods should be reviewed to ensure that the input is sanitized.
python,BAN-B602,subprocess_popen_with_shell_equals_true,major,security,"Python possesses many mechanisms to invoke an external executable. However, doing so may present a security issue if appropriate care is not taken to sanitize any user provided or variable input. Subprocess invocation using a command shell is dangerous as it is vulnerable to various shell injection attacks. Great care should be taken to sanitize all input in order to mitigate this risk. Calls of this type are identified by a parameter of ‘shell=True’ being given."
python,BAN-B603,subprocess_without_shell_equals_true,minor,security,"Spawning of a subprocess without the use of a command shell is not vulnerable to shell injection attacks, but care should still be taken to ensure validity of input."
python,BAN-B604,any_other_function_with_shell_equals_true,major,security,Method calls for the presence of a keyword parameter shell equalling true can be vulnerable to shell injection issues. This issue is intended to catch custom wrappers to vulnerable methods that may have been created.
python,BAN-B605,start_process_with_a_shell,minor,security,Spawning of a subprocess using a command shell is dangerous as it is vulnerable to various shell injection attacks. Great care should be taken to sanitize all input in order to mitigate this risk. Calls of this type are identified by the use of certain commands which are known to use shells. 
python,BAN-B606,start_process_with_no_shell,minor,security,"Spawning of a subprocess in a way that doesn’t use a shell is generally safe, but it maybe useful for penetration testing workflows to track where external system calls are used."
python,BAN-B607,start_process_with_partial_path,minor,security,Python possesses many mechanisms to invoke an external executable. If the desired executable path is not fully qualified relative to the filesystem root then this may present a potential security risk.
python,BAN-B608,hardcoded_sql_expressions,major,security,"An SQL injection attack consists of insertion or “injection” of a SQL query via the input data given to an application. It is a very common attack vector. Unless care is taken to sanitize and control the input data when building such SQL statement strings, an injection attack becomes possible."
python,BAN-B609,linux_commands_wildcard_injection,major,security,The use of partially qualified paths may result in unintended consequences if an unexpected file or symlink is placed into the path location given. This becomes particularly dangerous when combined with commands used to manipulate file permissions or copy data off of a system.
python,BAN-B610,django_extra_used,minor,security,"Use of `extra` in Django querysets should be audited, since unsanitized strings can open up security vulnerabilities."
python,BAN-B611,django_rawsql_used,minor,security,"Use of `extra` in Django querysets should be audited, since unsanitized strings can open up security vulnerabilities."
python,BAN-B701,jinja2_autoescape_false,critical,security,"When autoescaping is enabled, Jinja2 will filter input strings to escape any HTML content submitted via template variables. Without escaping HTML input the application becomes vulnerable to Cross Site Scripting (XSS) attacks."
python,BAN-B702,use_of_mako_templates,major,security,"Unlike Jinja2 (an alternative templating system), Mako has no environment wide variable escaping mechanism. Because of this, all input variables must be carefully escaped before use to prevent possible vulnerabilities to Cross Site Scripting (XSS) attacks."
python,BAN-B703,django_mark_safe,minor,security,Use of `mark_safe()` may expose cross-site scripting vulnerabilities and should be reviewed.
python,FLK8-C901,Function is too complex,major,bug-risk,"Too many decision blocks were found, which is why the code has been tagged as complex. You should consider refactoring the code for simplicity. Read more about cyclomatic complexity [here](https://en.wikipedia.org/wiki/Cyclomatic_complexity)."
python,FLK8-D100,Missing docstring in public module,minor,doc,
python,FLK8-D101,Missing docstring in public class,minor,doc,
python,FLK8-D102,Missing docstring in public method,minor,doc,
python,FLK8-D103,Missing docstring in public function,minor,doc,It is recommended to have docstrings in public functions.
python,FLK8-D104,Missing docstring in public package,minor,doc,
python,FLK8-D105,Missing docstring in magic method,minor,doc,
python,FLK8-D106,Missing docstring in public nested class,minor,doc,
python,FLK8-D107,Missing docstring in `__init__`,minor,doc,It is recommended to have docstrings in the `__init__` method.
python,FLK8-D200,One-line docstring should fit on one line with quotes,minor,doc,
python,FLK8-D201,No blank lines allowed before function docstring,minor,doc,
python,FLK8-D202,No blank lines allowed after function docstring,minor,doc,
python,FLK8-D203,1 blank line required before class docstring,minor,doc,
python,FLK8-D204,1 blank line required after class docstring,minor,doc,
python,FLK8-D205,1 blank line required between summary line and description,minor,doc,
python,FLK8-D206,"Docstring should be indented with spaces, not tabs",minor,doc,"It is recommended to use spaces in the docstrings, just as the code."
python,FLK8-D207,Docstring is under-indented,minor,doc,It is recommended to properly indent docstrings for readability. 
python,FLK8-D208,Docstring is over-indented,minor,doc,It is recommended to properly indent docstrings for readability. 
python,FLK8-D209,Multi-line docstring closing quotes should be on a separate line,minor,doc,
python,FLK8-D210,No whitespaces allowed surrounding docstring text,minor,doc,
python,FLK8-D211,No blank lines allowed before class docstring,minor,doc,
python,FLK8-D212,Multi-line docstring summary should start at the first line,minor,doc,
python,FLK8-D213,Multi-line docstring summary should start at the second line,minor,doc,
python,FLK8-D214,Section is over-indented,minor,doc,
python,FLK8-D215,Section underline is over-indented,minor,doc,
python,FLK8-D300,Use “”“triple double quotes”“”,minor,doc,Use of triple-quotes is recommended to specify docstrings.
python,FLK8-D301,Use r”“” if any backslashes in a docstring,minor,doc,"If there are backslashes in a docstring, please raw strings."
python,FLK8-D302,Use u”“” for Unicode docstrings,minor,doc,
python,FLK8-D400,First line should end with a period,minor,doc,
python,FLK8-D401,First line should be in imperative mood,minor,doc,
python,FLK8-D401,First line should be in imperative mood; try rephrasing,minor,doc,
python,FLK8-D402,First line should not be the function’s “signature”,minor,doc,
python,FLK8-D403,First word of the first line should be properly capitalized,minor,doc,
python,FLK8-D404,First word of the docstring should not be This,minor,doc,
python,FLK8-D405,Section name should be properly capitalized,minor,doc,
python,FLK8-D406,Section name should end with a newline,minor,doc,
python,FLK8-D407,Missing dashed underline after section,minor,doc,
python,FLK8-D408,Section underline should be in the line following the section’s name,minor,doc,
python,FLK8-D409,Section underline should match the length of its name,minor,doc,
python,FLK8-D410,Missing blank line after section,minor,doc,
python,FLK8-D411,Missing blank line before section,minor,doc,
python,FLK8-D412,No blank lines allowed between a section header and its content,minor,doc,
python,FLK8-D413,Missing blank line after last section,minor,doc,
python,FLK8-D414,Section has no content,minor,doc,
python,FLK8-E101,Indentation contains mixed spaces and tabs,major,bug-risk,"Indentation has has both tabs and spaces in it. You should use either tabs or spaces, but not both."
python,FLK8-E111,Indentation is not a multiple of four,major,style,PEP8 recommends that Python code indentation be a multiple of four.
python,FLK8-E112,Expected an indented block,major,bug-risk,This issue occurs when code is not indented but should be.
python,FLK8-E113,Unexpected indentation,major,bug-risk,A line is indented when it shouldn’t be. Usually this will mean that multiple lines need to be indented at the same level.
python,FLK8-E114,Indentation is not a multiple of four in comments,minor,style,Comment indentation should be a multiple of four.
python,FLK8-E115,Expected an indented block in comments,minor,style,An indented block comment was expected but a non-indented block comment was found instead.
python,FLK8-E116,Unexpected indentation in comments,minor,style,Comments should be indented relative to the code in the block they are in.
python,FLK8-E121,Continuation line under-indented for hanging indent,minor,style,A line is less indented than it should be for hanging indents.
python,FLK8-E122,Continuation line missing indentation or outdented,minor,style,A continuation line is not indented as far as it should be or is indented too far.
python,FLK8-E123,Closing bracket does not match indentation of opening bracket's line,minor,style,Closing brackets should match the same indentation level of the line that their opening bracket started on.
python,FLK8-E124,Closing bracket does not match visual indentation,minor,style,Closing brackets should match the indentation of the opening bracket.
python,FLK8-E125,Continuation line with same indent as next logical line,minor,style,"Continuation lines should not be indented at the same level as the next logical line. Instead, they should be indented to one more level so as to distinguish them from the next line."
python,FLK8-E126,Continuation line over-indented for hanging indent,minor,style,A continuation line is indented farther than it should be for a hanging indent.
python,FLK8-E127,Continuation line over-indented for visual indent,minor,style,A continuation line is indented farther than it should be for a visual indent.
python,FLK8-E128,Continuation line under-indented for visual indent,minor,style,A continuation line is under-indented for a visual indentation.
python,FLK8-E129,Visually indented line with same indent as next logical line,minor,style,A visual indented line has the same indentation as the next logical line. This can make it hard to read.
python,FLK8-E131,Continuation line unaligned for hanging indent,minor,style,A continuation line is unaligned for hanging indent.
python,FLK8-E201,Whitespace after `(`,minor,style,Open parentheses should not have any space before or after them.
python,FLK8-E202,Whitespace before `)`,minor,style,Closing parentheses should not have any before after them.
python,FLK8-E203,Whitespace before `:`,minor,style,Colons should not have any space before them.
python,FLK8-E211,Whitespace before `(`,minor,style,Open parentheses should not have any space before or after them.
python,FLK8-E221,Multiple spaces found before operator,minor,style,There should be only one space before an operator.
python,FLK8-E222,Multiple spaces found after operator,minor,style,There should be only one space after an operator.
python,FLK8-E223,Tab found before operator,minor,style,There should be only one space before or after operators.
python,FLK8-E224,Tab found after operator,minor,style,There should be only one space before or after operators.
python,FLK8-E225,Missing whitespace around operator,minor,style,There should be one space before and after all operators.
python,FLK8-E226,Missing whitespace around arithmetic operator,minor,style,"There should be one space before and after an arithmetic operator (`+`, `-`, `/`, and `*`)."
python,FLK8-E227,Missing whitespace around bitwise or shift operator,minor,style,"There should be one space before and after bitwise and shift operators (`<<`, `>>`, `&`, `|`, `^`)."
python,FLK8-E228,Missing whitespace around modulo operator,minor,style,The modulo operator (`%`) should have whitespace on either side of it.
python,FLK8-E231,"Missing whitespace after ',', ';', or ':'",minor,style,"There should be whitespace after the characters `,`, `;`, and `:`."
python,FLK8-E241,"Multiple spaces after ','",minor,style,"There should be only one space after the `,` character."
python,FLK8-E242,"Tab after ','",minor,style,"There should be only one space after the `,` character."
python,FLK8-E251,Unexpected spaces around keyword / parameter equals,minor,style,There should be no spaces before or after the `=` in a function definition.
python,FLK8-E261,At least two spaces before inline comment,minor,style,"Inline comments should have two spaces before them. Often programmers will only include one space, which will trigger this warning."
python,FLK8-E262,Inline comment should start with `# `,minor,style,Inline comments should have one space before the pound sign (`#`) and the comment itself.
python,FLK8-E265,Block comment should start with `# `,minor,style,Block comments should have one space before the pound sign (`#`) and the comment itself.
python,FLK8-E266,Too many leading `#` for block comment,minor,style,There should be only one leading `#` for a block comment.
python,FLK8-E271,Multiple spaces after keyword,minor,style,There should be only one space after a keyword.
python,FLK8-E272,Multiple spaces before keyword,minor,style,There should be only one space before a keyword.
python,FLK8-E273,Tab after keyword,minor,style,There should be only one space after a keyword.
python,FLK8-E274,Tab before keyword,minor,style,There should be only one space before a keyword.
python,FLK8-E275,Missing whitespace after keyword,minor,style,There should be one space after keywords.
python,FLK8-E301,"Expected 1 blank line, found 0",minor,style,One blank line is expected between the methods of a class.
python,FLK8-E302,"Expected 2 blank lines, found 0",minor,style,Two blank lines are expected between functions and classes.
python,FLK8-E303,Too many blank lines found,minor,style,Two blank lines are expected between functions and classes and one blank line is expected between methods of a class.
python,FLK8-E304,Blank lines found after function decorator,minor,style,There should be no blank lines between a function decorator and the function it is decorating.
python,FLK8-E305,Expected 2 blank lines after end of function or class,minor,style,"Functions and classes should have two blank lines after them, separating them from other functions and classes.
"
python,FLK8-E306,Expected 1 blank line before a nested definition,minor,style,Nested functions and classes should have one blank line before them.
python,FLK8-E401,Multiple imports on one line,minor,style,Imports from different modules should occur on different lines.
python,FLK8-E402,Module level import not at top of file,minor,style,All module level imports should be at the top of the file. This means that there should be no statements in between module level imports.
python,FLK8-E501,Line too long,minor,style,Line lengths are recommended to be no greater than 79 characters.
python,FLK8-E502,The backslash is redundant between brackets,minor,style,There is no need for backslashes between brackets.
python,FLK8-E701,Multiple statements on one line (colon),major,style,Multiple statements should be on their own separate lines. This improves readability.
python,FLK8-E702,Multiple statements on one line (semicolon),minor,style,Multiple statements should not be on the same line separated by a semicolon. They should be on their own separate lines.
python,FLK8-E703,Statement ends with a semicolon,minor,style,"Unlike programming languages like Java and C#, statements in Python do not need to end with a semicolon. They can be removed."
python,FLK8-E704,Multiple statements on one line (def),major,style,Multiple statements of a function definition should be on their own separate lines.
python,FLK8-E711,Comparison to None should be 'if cond is None:',minor,bug-risk,"Comparisons to the singleton objects, like `True`, `False`, and `None`, should be done with identity, not equality. Use “is” or “is not”."
python,FLK8-E712,Comparison to True should be 'if cond is True:' or 'if cond:',minor,bug-risk,"When comparing a variable to `True`, you should use the form `if x is True` or simply `if x`. The most common incorrect form is `if x == True`."
python,FLK8-E713,Test for membership should be 'not in',minor,bug-risk,Tests for membership should use the form `x not in the_list` rather than `not x in the_list`. The former example is simply more readable.
python,FLK8-E714,Test for object identity should be 'is not',minor,bug-risk,Tests for object identity should use the form `x is not None` rather than `not x is None`. The former example is simply more readable.
python,FLK8-E722,"Do not use bare `except`, specify exception instead",minor,bug-risk,Using `except` without a specific exception can be error prone.
python,FLK8-E731,"Do not assign a lambda expression, use a `def`",minor,bug-risk,"Lambdas should not be assigned to a variable. Instead, they should be defined as functions. The primary reason for this is debugging. Lambdas show as `<lambda>` in tracebacks, where functions will display the function’s name."
python,FLK8-E741,"Do not use variables named 'l', 'O', or 'I'",major,style,"Variables named `I`, `O`, and `l` can be very hard to read. This is because the letter `I` and the letter `l` are easily confused, and the letter `O` and the number `0` can be easily confused.

Change the names of these variables to something more descriptive.

"
python,FLK8-E742,"Do not define classes named 'l', 'O', or 'I'",major,style,"Classes named `I`, `O`, and `l` can be very hard to read. This is because the letter `I` and the letter `l` are easily confused, and the letter `O` and the number `0` can be easily confused.

Change the names of these classes to something more descriptive."
python,FLK8-E743,"Do not define functions named 'l', 'O', or 'I'",major,style,"Functions named `I`, `O`, and `l` can be very hard to read. This is because the letter `I` and the letter `l` are easily confused, and the letter `O` and the number `0` can be easily confused.

Change the names of these functions to something more descriptive."
python,FLK8-F402,import module from line N shadowed by loop variable,major,bug-risk,Loop variables should not redefine the name of modules that are imported.
python,FLK8-F403,‘from module import *’ used; unable to detect undefined names,major,bug-risk,"`from module import *` is discouraged because the programmer often won’t know where an imported object is defined. The imported module, class, or function should be explicitly defined."
python,FLK8-F404,future import(s) name after other statements,major,style,Imports from `__future__` should be the first imports in a file.
python,FLK8-F405,"name may be undefined, or defined from star imports: module",major,bug-risk,"This warning occurs in conjunction with issue FLK8-F403, `'from module import *'` used. It means that the variable name could be undefined, but we cannot be sure because it also could also be imported in the star imports.

Confirm that the variable is defined in the star imports. If it is, explicitly import it instead of importing `*`. If not, then define the variable."
python,FLK8-F406,`from module import *` is only allowed at module level,major,bug-risk,"Importing `*` is generally discouraged, but if there's a need regardless, such imports should only be done on module level."
python,FLK8-F407,an undefined __future__ feature name was imported,critical,bug-risk,The imported name does not exist in the `__future__` package.
python,FLK8-F601,Dictionary key name repeated with different values,major,bug-risk,All dictionary keys should be unique.
python,FLK8-F602,Dictionary key variable name repeated with different values,major,bug-risk,All dictionary keys should be unique.
python,FLK8-F621,Too many expressions in an assignment with star-unpacking,major,bug-risk,Too many expressions found in starred assignment. This can be error prone.
python,FLK8-F622,"Two or more starred expressions in an assignment (a, *b, *c = d)",major,bug-risk,There are more than one starred expressions (*x) in an assignment. This is a SyntaxError.
python,FLK8-F631,"Assertion test is a tuple, which are always True",major,bug-risk,"A tuple with at least one element is always truthy, so the assertion will always pass. Remove the parentheses."
python,FLK8-F701,`break` statement used outside of a `while` or `for` loop,major,bug-risk,break statement should not be used outside a loop.
python,FLK8-F702,`continue` statement outside of a `while` or `for` loop,major,bug-risk,continue statement should not be used outside a loop.
python,FLK8-F703,`continue` statement used in a `finally` block in a loop,minor,bug-risk,"continue statement doesn't have any effect in the finally block, and can be removed."
python,FLK8-F704,`yield` or `yield from` statement used outside of a function,major,bug-risk,yield should not be used outside of a function.
python,FLK8-F705,`return` statement used with arguments inside a generator,major,bug-risk,A return statement with arguments should not be used inside a generator.
python,FLK8-F706,`return` statement used outside of a function or method,major,bug-risk,Return statement should not be used outside of a function or method.
python,FLK8-F707,`except:` block found as not the last exception handler,major,bug-risk,A bare exception catcher should always be the last block in a `try...except`.
python,FLK8-F721,doctest syntax error syntax error in forward type annotation,,,
python,FLK8-F722,doctest syntax error syntax error in forward type annotation,,,
python,FLK8-F812,List comprehension redefines name from line N,minor,bug-risk,A list comprehension is using the same name as another variable defined in the module. Either change the variable name in the list comprehension or change it in the module.
python,FLK8-F821,Undefined name detected,critical,bug-risk,The variable name is not defined where it is used.
python,FLK8-F822,Undefined name detected in `__all__`,critical,bug-risk,An undefined module was specified in the `__all__` list. Ensure that it is specified in your file or remove the variable from `__all__`.
python,FLK8-F823,Local variable name referenced before assignment,critical,bug-risk,Local variables should be defined before they are referenced.
python,FLK8-F831,Duplicate argument in function definition,critical,bug-risk,Two or more parameters in a function definition have the same name. All names in the function definition should be distinct.
python,FLK8-F901,`raise NotImplemented` should be `raise NotImplementedError`,major,bug-risk,"`NotImplemented` signals to the runtime that it should ask someone else to satisfy the operation. In the expression `a == b`, if `a.__eq__(b)` returns `NotImplemented`, then Python tries `b.__eq__(a)`. If `b` knows enough to return `True` or `False`, then the expression can succeed. If it doesn't, then the runtime will fall back to the built-in behavior (which is based on identity for `==` and `!=`).

Raising an exception would break out of the sort unless caught, whereas `NotImplemented` doesn't get raised and can be used in further tests."
python,FLK8-W191,Indentation contains tabs,minor,style,Indentation has tabs when only spaces are expected. Change all tabs to spaces.
python,FLK8-W291,Trailing whitespace,minor,style,There should be no whitespace after the final character in a line.
python,FLK8-W292,No newline at end of file,minor,style,Files should end with a newline.
python,FLK8-W293,Blank line contains whitespace,minor,style,Blank lines should not contain any tabs or spaces.
python,FLK8-W391,Blank line at end of file,minor,style,"There should be one, and only one, blank line at the end of each file. This warning will occur when there are two or more blank lines."
python,FLK8-W503,Line break before binary operator,minor,style,Line breaks should occur after the binary operator to keep all variable names aligned.
python,FLK8-W504,Line break after binary operator,minor,style,
python,FLK8-W505,Doc line too long,minor,style,Docstring line lengths are recommended to be no greater than 79 characters.
python,FLK8-W601,".has_key() is deprecated, use 'in'",major,antipattern,`.has_key()` was deprecated in Python 2. It is recommended to use the in operator instead.
python,FLK8-W602,deprecated form of raising exception,major,antipattern,"The `raise Exception, message` form of raising exceptions is deprecated. Use the new form, `raise Exception(message)`."
python,FLK8-W603,"<>' is deprecated, use '!='",major,antipattern,`<>` has been deprecated and removed in Python 3. Replace instances of `<>` with `!=`.
python,FLK8-W604,"backticks are deprecated, use 'repr()'",major,antipattern,Backticks were deprecated and removed in Python 3. Use the built-in function `repr()` instead.
python,FLK8-W605,Invalid escape sequence found,major,bug-risk,"As of Python 3.6, a backslash-character pair that is not a valid escape sequence now generates a DeprecationWarning. Although this will eventually become a SyntaxError, that will not be for several Python releases."
python,FLK8-W606,`async` and `await` are reserved keywords starting with Python 3.7,major,bug-risk,Using these symbols as names can break your code in future.
python,FLK8-E999,SyntaxError: invalid sytax,critical,bug-risk,A Python syntax error is detected.
python,PYL-C0102,blacklisted-name,major,style,These names can make the intention of the code unclear and hard to understand and debug. Using descripted names is recommended.
python,PYL-C0113,unneeded-not,major,style,"The boolean expression contains an unneeded negation, and can be re-written without using the `not` statement."
python,PYL-C0122,misplaced-comparison-constant,major,style,The constant is placed on the left side of a comparison. It is usually clearer in intent to place it in the right hand side of the comparison.
python,PYL-C0123,Unidiomatic typecheck: use `isinstance()`,major,bug-risk,"Use `isinstance()` instead `type()` of  for a typecheck. The idiomatic way to perform an explicit typecheck in Python is to use `isinstance(x, Y)` rather than `type(x) == Y`, `type(x) is Y`. This is because `isinstance` can handle subclasses as well."
python,PYL-C0200,Consider using `enumerate` for iteration,major,style,"Consider using enumerate instead of iterating with range and len, which is more straightforward."
python,PYL-C0201,Consider iterating dictionary,major,style,"Consider iterating the dictionary directly instead of calling .keys(). It is enough to just iterate through the dictionary itself, as in `for key in dictionary`."
python,PYL-C0202,bad-classmethod-argument,major,style,Use of `cls` as the first named argument in a class method is recommended so it's easy to differentiate them from regular instance methods.
python,PYL-C0203,bad-mcs-method-argument,major,style,Use of `cls` as the first named argument in a metaclass method is recommended so it's easy to differentiate them from regular instance methods.
python,PYL-C0204,bad-mcs-classmethod-argument,major,style,Use of `mcs` as the first named argument in a metaclass class method is recommended so it's easy to differentiate them from regular instance methods.
python,PYL-C0205,"Slots should be an interable, simple string detected",major,style,"Class slots is a simple string, rather than an iterable."
python,PYL-C0302,too-many-lines,minor,antipattern,"Having too many lines in a module reduces readability, and may be a sign that refactoring is needed. The recommended maximum number of lines in a module is 1000."
python,PYL-C0325,superfluous-parens,minor,style,Parentheses can be omitted after the keyword.
python,PYL-C0327,mixed-line-endings,minor,style,There are mixed (LF and CRLF) newline signs in a file.
python,PYL-C0328,unexpected-line-ending-format,minor,style,Unexpected line ending format.
python,PYL-C0401,wrong-spelling-in-comment,minor,style,A word in comment is not spelled correctly.
python,PYL-C0402,wrong-spelling-in-docstring,minor,style,A word in docstring is not spelled correctly.
python,PYL-C0403,invalid-characters-in-docstring,minor,style,Invalid characters found in docstring.
python,PYL-C1801,len-as-condition,major,performance,"Using the `len` function to check if a sequence is empty is not idiomatic and can be less performant than checking for truthness of the sequence. 

`len` doesn't know the context in which it is called, so if computing the length means traversing the entire sequence, it must; it doesn't know that the result is just being compared to 0. Computing the boolean value can stop after it sees the first element, regardless of how long the sequence actually is."
python,PYL-E0100,init-is-generator,critical,bug-risk,"The `__init__()` method is required to return nothing, but a `yield` statement in its body was detected. This will raise a `TypeError` on Python 2.7 and 3.x."
python,PYL-E0101,return-in-init,critical,bug-risk,"The `__init__()` method is required to return `None`, but an explicit return value in its body was detected. This will raise a `TypeError` on Python 2.7 and 3.x."
python,PYL-E0102,function-redefined,major,bug-risk,"A redefinition of functions, classes, and methods is allowed and overrides the original definition in Python, but is confusing and cause bugs that are difficult to debug."
python,PYL-E0110,abstract-class-instantiated,major,bug-risk,An abstract class with `abc.ABCMeta` as metaclass has abstract methods and is instantiated.
python,PYL-E0111,bad-reversed-sequence,critical,bug-risk,"The first argument to `reversed()` builtin isn't a sequence (does not implement `reversed`, nor `getitem` and `len`)."
python,PYL-E0113,invalid-star-assignment-target,major,bug-risk,A star expression is used as a starred assignment target. It must be in a list or tuple.
python,PYL-E0114,star-needs-assignment-target,major,bug-risk,A star expression can only be used in an assignment target.
python,PYL-E0115,nonlocal-and-global,major,bug-risk,A name is defined as nonlocal and global in the same scope.
python,PYL-E0117,nonlocal-without-binding,major,bug-risk,A name is defined as nonlocal without any binding.
python,PYL-E0118,used-prior-global-declaration,major,bug-risk,A global name us used prior to it's global declaration.
python,PYL-E0119,misplaced-format-function,critical,bug-risk,The `format()` function is called on an object that is not a string. This is an error.
python,PYL-E0202,method-hidden,major,bug-risk,"When a method is defined in a child class which has the same name as an attribute in the ancestor class, the attribute in the ancestor class takes precedence and hides the method."
python,PYL-E0203,Member of class accessed before definition,critical,bug-risk,"A member of a class is being accessed before its definition. This can cause an error while execution.

There can be cases when the member is initialized dynamically or using unconventional methods, like setting a value in the `locals()` dictionary, or using `__setattr__` on an object. Doing so affects readability and is generally not recommended. In such cases, either change the approach, or ignore this issue explicitly for this file."
python,PYL-E0211,no-method-argument,critical,bug-risk,A method which should have the bound instance as first argument has no argument defined. This is an error.
python,PYL-E0213,Method should have `self` as the first argument,major,bug-risk,The first argument of instance methods must be named `self`. This is considered an error since this convention is so common that you shouldn't break it.
python,PYL-E0236,invalid-slots-object,critical,bug-risk,Slots must contain only string objects.
python,PYL-E0237,assigning-non-slot,critical,bug-risk,Assigning to an attribute not defined in the class slots will cause an error.
python,PYL-E0238,invalid-slots,critical,bug-risk,"An invalid slots value is found in class. Only a string, an iterable or a sequence is permitted. This is an error."
python,PYL-E0239,inherit-non-class,critical,bug-risk,Python classes can only inherit from a class. Inheriting from any other object is an error.
python,PYL-E0240,inconsistent-mro,critical,bug-risk,"The order in which other classes are specified for inheritence in a class matters. Python classes use the C3 linearization method to determine a method resolution ordering for each class, which ensures that for a class C, if a class C1 precedes a class C2 in the MRO of C then C1 should also precede C2 in the MRO of all subclasses of C."
python,PYL-E0241,duplicate-bases,critical,bug-risk,A class must not specify inheritance from another class more than one times. Duplicate base classes will raise a `TypeError`.
python,PYL-E0301,non-iterator-returned,critical,bug-risk,The `__iter__` method of a class must return an iterator with a `__next__` method.
python,PYL-E0303,invalid-length-returned,critical,bug-risk,The `__len__` method of a class must return a non-negative integer.
python,PYL-E0402,Attempted relative import beyond top-level package,critical,bug-risk,A relative import has been attempted from beyond the top-level package. This is an error.
python,PYL-E0604,Invalid object found in `__all__`,critical,bug-risk,The `__all__` list must contain only strings. Having other kinds of objects is an error.
python,PYL-E0633,Attempting to unpack a non-sequence object,critical,bug-risk,"Unpacking is supported only for sequence objects, like lists, sets, tuples, iterators or generators, etc."
python,PYL-E0701,Bad `except` order found,critical,bug-risk,Except clauses are not in the correct order (from the more specific to the more generic). Some exceptions may not be caught by the most specific handler.
python,PYL-E0702,Object of unsupported type raised,critical,bug-risk,"Raising objects other than a class, an instance or a string can cause a `TypeError`.

There can be cases where the value being raised is dynamically set. One common example is setting the value to `None` originally, and then assigning other objects to it based on a condition. Doing so can affect readability, and is generally not recommended. In such cases, either re-write the block, or ignore the issue for this file."
python,PYL-E0703,"Exception context set to something which is not an exception, nor None",critical,bug-risk,"The syntax `raise ... from ...` can be used only when the exception context is an exception, or `None`. Trying to do so with other object types is an error."
python,PYL-E0704,The raise statement is not inside an except clause,critical,bug-risk,"A bare raise is used inside something which is not an `except` clause. This generates an error, since there are no active exceptions to be re-raised. An exception to this rule is represented by a bare raise inside a `finally` clause, which might work, as long as an exception is raised inside the `try` block, but it is nevertheless a code smell that must not be relied upon."
python,PYL-E0710,New-style class raised which doesn't inherit from `BaseException`,critical,bug-risk,New-style classes raised must inherit from `BaseException`.
python,PYL-E0712,Exception caught which does not inherit from `Exception`,critical,bug-risk,"For an exception to be caught, it must inherit from the `Exception` class."
python,PYL-E1003,Bad first argument given in `super()` call,critical,bug-risk,The first argument to the `super()` function must be the current class.
python,PYL-E1004,Missing argument in `super()` call,critical,bug-risk,"In Python 2.x, the `super()` function must be called with the current class as the first argument, and the current instance as the second argument."
python,PYL-E1102,A non-callable object is being called,critical,bug-risk,An object being called has been inferred to a non callable object. This is an error.
python,PYL-E1111,"Assigning result of a function call, where the function has no return",critical,bug-risk,"An assignment is done on a function call but the inferred function doesn't return anything. While this is not an error in Python, it is a critical anti-pattern and can lead to unexpected bugs."
python,PYL-E1120,Missing argument in function call,critical,bug-risk,A required function parameter isn't provided while calling the function. This is an error.
python,PYL-E1121,Too many positional arguments in function call,critical,bug-risk,Too many positional arguments are provided while calling the function. This is an error.
python,PYL-E1123,Unexpected keyword argument in function call,critical,bug-risk,The function call has passed a keyword argument that doesn't correspond to one of the function's parameter names. This is an error.
python,PYL-E1124,Argument passed both by position and keyword in function call,critical,bug-risk,"The function call would result in assigning multiple values to a function parameter, one value from a positional argument and one from a keyword argument."
python,PYL-E1125,Missing mandatory keyword argument in function call,critical,bug-risk,The function call does not pass a mandatory keyword-only argument. This is an error.
python,PYL-E1126,Invalid sequence index found,critical,bug-risk,"A sequence type is indexed with an invalid type. Valid types are `int`s, slices, and objects with an `__index__` method."
python,PYL-E1127,Invalid slice index found,critical,bug-risk,"A slice is indexed with an invalid type. Valid types are `int`s, slices, and objects with an `__index__` method."
python,PYL-E1128,"Assigning result of a function call, where the function returns `None`",major,bug-risk,"An assignment is done on a function call but the inferred function returns `None`. While this is allowed in Python, it is an anti-pattern and can lead to unexpected bugs."
python,PYL-E1129,Object which is not a context manager used with the `with` statement,critical,bug-risk,The object used in the `with` statement doesn't implement the context manager protocol (enter/exit). This is an error.
python,PYL-E1130,Unary operand used on an unsupported object,critical,bug-risk,A unary operand is used on an object which does not support this type of operation. This is an error.
python,PYL-E1131,Unsupported binary operation,critical,bug-risk,Binary operation being done between operands that do not support it. This can cause an error on execution.
python,PYL-E1132,Multiple values found for keyword argument,critical,bug-risk,The function was invoked with more than one values for a keyword argument. This is an error.
python,PYL-E1135,Membership test used with unsupported object,critical,bug-risk,A membership test using `in` statement is supported only with objects which implement the membership protocol -- `__contains__` / `__iter__` / `__getitem__`.
python,PYL-E1136,Subscription used with unsupported object,critical,bug-risk,Subscription can be used only with objects which implement `__getitem__`.
python,PYL-E1137,Assignment attempted with unsupported object,critical,bug-risk,Assignment is supported only for items which implement `__setitem__`.
python,PYL-E1138,Deletion attempted with unsupported object,critical,bug-risk,Deletion is supported only for items which implement `__delitem__`.
python,PYL-E1139,Invalid metaclass,major,bug-risk,"The class is using, as a metaclass, something which might be invalid for using as a metaclass."
python,PYL-E1140,Dictionary key is unhashable,critical,bug-risk,"It is recommended to use strings or integers as keys. If you want to use complex objects, ensure that they are hashable."
python,PYL-E1200,Unsupported format character used in the logging format string,critical,bug-risk,Logging format string must not contain any unsupported format character.
python,PYL-E1201,Logging format string terminated in between conversion specifier,critical,bug-risk,Logging statement format string shall not terminate before the end of a conversion specifier.
python,PYL-E1205,Logging format string contains too many arguments,critical,bug-risk,Too many arguments passed to the logging format string.
python,PYL-E1206,Logging format string contains very few arguments,critical,bug-risk,Very few arguments are passed to the logging format string.
python,PYL-E1300,Invalid format character,critical,bug-risk,An unsupported format character is used in the format string. It is recommended to check the format string once again and see if there is need to escape some special character.
python,PYL-E1301,Format string truncated,major,bug-risk,The format string was terminated before the end of a conversion specifier. It is recommended to look again and verify if the conversion specifier is given.
python,PYL-E1302,Mixed format string,major,bug-risk,"The format string contains both named (e.g. `%(foo)d`) and unnamed (e.g. `%d`) conversion specifiers.
This issue is also raised when the named conversion specifier contains * for the minimum field width and/or precision. This may give you an error. "
python,PYL-E1303,Format needs mapping,major,bug-risk,"The format string that uses named conversion specifiers is used with an argument that is not a mapping. This will raise a `TypeError`.
It is recommended to convert the argument into a mapping, e. g. a dictionary."
python,PYL-E1304,Missing format string key,major,bug-risk,The format string that uses named conversion specifiers is used with a dictionary that doesn't contain all the keys required by the format string. This can cause an error.
python,PYL-E1305,Format string contains excess arguments,critical,bug-risk,Format string has been given excess variables to unpack. This can cause an error.
python,PYL-E1306,Not enough arguments in format string,critical,bug-risk,Format string do not contain enough arguments to unpack. This can cause an error.
python,PYL-E1307,Bad string format type,major,bug-risk,The type required by format string is not suitable for actual argument type. This can cause an error.
python,PYL-E1310,Bad string strip call,minor,antipattern,"The argument to a `str.{l,r,}strip` call contains a duplicate character. Although this will not cause an error, but it is recommended to remove duplicates.
This may affect the redability."
python,PYL-E1507,Invalid value passed to access env variable,major,bug-risk,Env manipulation functions support only string type arguments.
python,PYL-E1601,`print` statement detected,major,bug-risk,`print` is being used as a statement here. It has been converted to a function in Python 3. This will cause an error.
python,PYL-E1602,Parameter unpacking detected,major,bug-risk,Parameter unpacking is specified for a function. It has been removed from Python 3. Read more about it [here](https://www.python.org/dev/peps/pep-3113/)
python,PYL-E1603,Unpacking in except,major,bug-risk,"Implicit unpacking of exceptions in except clauses was supported in Python 2. 
This has been removed from Python 3. Using this will give a `SyntaxError`. Read more about this [here](http://www.python.org/dev/peps/pep-3110/)"
python,PYL-E1604,Old `raise` syntax deteted,major,bug-risk,"The alternate raise syntax `raise foo, bar` is used instead of `raise foo(bar)`. This is a syntax error in Python 3."
python,PYL-E1605,Backtick detected,major,bug-risk,"Backtick ""``"" operator has been deprecated. Use the `str()` function instead."
python,PYL-E1606,Use of long suffix,major,bug-risk,"""l"" or ""L"" is used to mark a long integer. This will not work in Python 3, since `int` and `long` types have merged."
python,PYL-E1607,Old inequality operator used,major,bug-risk,Do not use `<>` operator. This is removed in Python 3 and will raise a SyntaxError. Use `!=` instead.
python,PYL-E1608,Old octal literal,major,bug-risk,"Old octal syntax is being used. This has been removed in Python 3, and will raise an error.
To use the new syntax, prepend 0o on the number."
python,PYL-E1609,import-star-module-level,,,
python,PYL-E1610,Non ascii bytes literals detected,major,bug-risk,Non-ascii bytes literals are being used in a program. They are no longer supported in Python 3.
python,PYL-E1700,yield-inside-async-function,,,
python,PYL-E1701,not-async-context-manager,,,
python,PYL-E0302,unexpected-special-method-signature,,,
python,PYL-I1101,c-extension-no-member,,,
python,PYL-R0123,Comparing to literal,minor,antipattern,"Comparing an object to a literal is usually something you do not want to do, since you can compare to a different literal than what was expected altogether."
python,PYL-R0124,Comparision with itself,minor,antipattern,"Comparision of an object with itself always returns `True`.
This is redundant."
python,PYL-R0201,No use of `self`,minor,antipattern,"The method doesn't use its bound instance, and so could be written as a function. You may want to make this a staticmethod or move this method out of the classs as pure function. Read more about staticmethods [here](https://docs.python.org/3/library/functions.html#staticmethod)"
python,PYL-R0202,No `@classmethod` decorator,major,antipattern,"It is recommended to use the decorator syntax to declare a classmethod.
Read more about classmethod [here](https://docs.python.org/3/library/functions.html#classmethod)"
python,PYL-R0203,No `@staticmethod` decorator,major,antipattern,"It is recommended to use the decorator syntax to declare a staticmethod.
Read more about staticmethod [here](https://docs.python.org/3/library/functions.html#staticmethod)"
python,PYL-R0205,Useless inheritance from `object`,minor,antipattern,"The class is inheriting from `object`, which is implicit under Python3 , hence can be safely removed from bases."
python,PYL-R0401,Cyclic import found,minor,antipattern,"Cyclic imports shall be avoided.
Read why are they fatal [here](https://datagrok.org/python/circularimports/).

Read more about avoiding cyclic imports [here](https://stackoverflow.com/questions/7336802/how-to-avoid-circular-imports-in-python)."
python,PYL-R0801,Duplicate code,major,antipattern,Similar lines has been detected among multiple file. This usually means that the code should be refactored to avoid this duplication.
python,PYL-R0901,too-many-ancestors,,,
python,PYL-R0902,too-many-instance-attributes,,,
python,PYL-R0903,too-few-public-methods,,,
python,PYL-R0904,too-many-public-methods,,,
python,PYL-R0911,Too many `return` statements,minor,antipattern,"Although there is nothing wrong with this, but it is recommended to refactor this since having too many return statements may make the code hard to follow."
python,PYL-R0912,Too many branches,minor,antipattern,"Although there is nothing wrong with this, but it is recommended to refactor this since having too many branches may make the code hard to follow."
python,PYL-R0913,Too many arguments,,,
python,PYL-R0914,Too many locals,,,
python,PYL-R0915,Too many statements,minor,antipattern,"Although there is nothing wrong with this, but it is recommended to split this into smaller functions / methods to have a better redability."
python,PYL-R0916,Too many boolean expressions,,,
python,PYL-R1701,Consider merging `isinstance` calls,minor,antipattern,It is recommended to merge multiple consecutive `isinstance` calls into one for better readability.
python,PYL-R1702,Too many nested block,minor,antipattern,"Although there is nothing wrong with this, but it is recommended to refactor this since having too many nested blocks may make the code hard to follow."
python,PYL-R1703,simplifiable-if-statement,,,
python,PYL-R1704,Argument redefined from local,major,antipattern,"A local name is redefining an argument, which might suggest a potential error. This is taken in account only for a handful of name binding operations, such as for iteration, with statement assignment and exception handler assignment."
python,PYL-R1705,no-else-return,,,
python,PYL-R1706,consider-using-ternary,,,
python,PYL-R1707,trailing-comma-tuple,,,
python,PYL-R1708,stop-iteration-return,,,
python,PYL-R1709,simplify-boolean-expression,,,
python,PYL-R1710,inconsistent-return-statements,,,
python,PYL-R1711,useless-return,,,
python,PYL-R1712,consider-swap-variables,,,
python,PYL-R1713,consider-using-join,,,
python,PYL-R1714,consider-using-in,,,
python,PYL-R1715,Use `get()` method to access values from a dictionary,,antipattern,"In case of checking if key exists in the dictionary and then fetching the value, it is recommended to use the built-in method `dict.get(key[, default])`. This returns the respective value if key exists in the dictionary, else returns a default value, avoiding the dictionary lookup twice.
It is simpler and considered more idiomatic, although it is sometimes a bit slower than accessing the value directly."
python,PYL-R1716,Chained comarision detected,minor,antipattern,"Detected boolean operation like`a < b and b < c`.
It is recommended to refactor it to `a < b < c`. It improves the redability,"
python,PYL-R1717,Consider using a dictionary comprehension,minor,performance,"Although there is nothing syntactically wrong with this code, it is hard to read and can be simplified to a dict comprehension. Also it is faster since there is no need to create another transient list."
python,PYL-R1718,Consider using a set comprehension,minor,performance,"Although there is nothing syntactically wrong with this code, it is hard to read and can be simplified to a set comprehension. Also it is faster since there is no need to create another transient list."
python,PYL-W0101,Statement not reachable on execution,major,antipattern,"This statement is unreachable, as the control flow will never reach upto this point. Consider removing this part of code or re-evaluating the control flow."
python,PYL-W0102,Dangerous default argument,critical,bug-risk,Do not use a mutable like `list` or `dictionary` as a default value to an argument. Python’s default arguments are evaluated once when the function is defined. Using a mutable default argument and mutating it will mutate that object for all future calls to the function as well.
python,PYL-W0104,Statement has no effect,major,antipattern,The expression or statement is pointless and will have no effect on the program on execution.
python,PYL-W0105,pointless-string-statement,,,
python,PYL-W0106,Expression not assigned,minor,antipattern,An expression that is not a function call is assigned to nothing. Probably something else was intended here. We recommend to review this. Ignore if this is intended. 
python,PYL-W0108,Unnecessary lambda expression,major,bug-risk,A lambda that calls a function without modifying any of its parameters is unnecessary. Python functions are first class objects and can be passed around in the same way as the resulting lambda. It is recommended to remove the lambda and use the function directly.
python,PYL-W0109,Duplicate dictionary keys,major,bug-risk,"Dictionary expression binds the same key multiple times. This is not recommended as this may lead to unintentional behaviour.
It is recommendes to have unique dictionary keys."
python,PYL-W0111,Assignment to a new keyword,major,bug-risk,"Assignment is being done to a variable which will become a keyword in the future releases. This statement, which is working fine right now, will give an error in the next Python version. We recommend you to rename this variable. "
python,PYL-W0120,Useless else clause detected on the loop,major,bug-risk,"When a loop specifies no break statement, the else clause will always execute when the loop sequence is empty, thus making it useless. It is recommended to have the statements under else in the same scope as the loop itself. If the else clause should not always execute at the end of a loop clause, then the code should add a break statement within the loop block."
python,PYL-W0122,Audit required: Use of `exec`,major,security,"Usage of `exec` function is strongly discouraged, since it opens up possibilities of unauthorized code execution if the statements are not escaped properly. Read more on why should `exec` be avoided [here](https://stackoverflow.com/questions/1933451/why-should-exec-and-eval-be-avoided)."
python,PYL-W0123,Audit required: Use of `eval`,major,security,Use of possibly insecure function - consider using safer `ast.literal_eval`. Read more on why should `eval` be avoided [here](https://stackoverflow.com/questions/1933451/why-should-exec-and-eval-be-avoided).
python,PYL-W0124,`as` with another context manager looks like a tuple,minor,bug-risk,"This `with` statement component returns multiple values and uses name binding with `as` only for a part of those values, as in with ctx() as a, b. This can be misleading, since it's not clear if the context manager returns a tuple or if the node without a name binding is another context manager."
python,PYL-W0125,Conditional statement used with a constant value,major,antipattern,Using a conditional statement with a constant value is pointless and will always evaluate to either True or False. This might not be what is intended.
python,PYL-W0143,comparison-with-callable,,,
python,PYL-W0150,Exception might be lost,major,bug-risk,The `finally` block may swallow any exceptions raised in the `try` block. This can pose a bug risk.
python,PYL-W0199,`assert` called on tuple,major,bug-risk,"A call of `assert` on a tuple will always evaluate to `True` if the tuple is not empty, and will always evaluate to `False` if it is. "
python,PYL-W0201,Attribute defined outside `__init__`,minor,antipattern,"Defining an instance attribute outside `__init__` affects the readability of code. It is expected to find all the attributes an instance may have by reading its `__init__` method. If there is a need to initialize attribute via sub-initialization methods, it is recommended to assign attributes to `None` in the __init__ then call the sub-initialization methods."
python,PYL-W0211,Bad `staticmethod` argument detected,major,bug-risk,"It is customary for instance or class methods to take `self` or `cls`, respectively, as their first arguments, a method that uses either of these names but is found to be a static method may have been defined incorrectly. Choose names other than `self` or `cls` for arguments to avoid confusing other programmers looking at your code."
python,PYL-W0212,Protected member accessed from outside outside the class,minor,bug-risk,"Accessing a protected member (a member prefixed with `_`) of a class from outside that class is not recommended, since the creator of that class did not intend this member to be exposed. If accesing this attribute outside of the class is absolutely needed, refactor it such that it becomes part of the public interface of the class."
python,PYL-W0221,arguments-differ,,,
python,PYL-W0222,signature-differs,,,
python,PYL-W0223,abstract-method,,,
python,PYL-W0231,`__init__` method from the base class not called,minor,bug-risk,The ancestor class method has an init method which is not called by the derived class. This can cause unintended consequences.
python,PYL-W0232,no-init,,,
python,PYL-W0233,non-parent-init-called,,,
python,PYL-W0235,useless-super-delegation,,,
python,PYL-W0301,Unnecessary semicolon,minor,style,Semicolon used is unecessary on this line.
python,PYL-W0311,bad-indentation,,,
python,PYL-W0312,mixed-indentation,,,
python,PYL-W0401,wildcard-import,,,
python,PYL-W0402,Use of a deprecated module detected,major,bug-risk,The moule imported has been deprecated for the current version of Python.
python,PYL-W0403,relative-import,,,
python,PYL-W0404,Module re-imported,major,bug-risk,"A module is reimported mulitple times. This can be confusing, and should be fixed."
python,PYL-W0406,import-self,,,
python,PYL-W0410,misplaced-future,,,
python,PYL-W0511,fixme,,,
python,PYL-W0512,invalid-encoded-data,,,
python,PYL-W0601,global-variable-undefined,,,
python,PYL-W0602,Global variable is declared but not used,major,bug-risk,The variable is defined through the `global` statement but no assignment to this variable is done. It is recommended to remove it if not necessary.
python,PYL-W0603,global-statement,,antipattern,
python,PYL-W0604,Use of `global` at module level,major,antipattern,"The global statement is used to specify that the assignment to that name is an assignment to the variable in the global (module) scope, rather than in the local scope. At the module level, this statement is redundant because the local scope and global scope are the same.
It is recommended to remove the `global` statement."
python,PYL-W0611,Module imported but unused,major,antipattern,A module has been imported but is not used anywhere in the file. The module should either be used or the import should be removed.
python,PYL-W0612,Unused variable found,major,antipattern,"An unused variable take up space in the code, and can lead to confusions. It should be removed. If this variable is necessary, name the variable `_` or start the name with `unused` or `_unused`."
python,PYL-W0613,Function contains unused argument,major,antipattern,"An unused argument can lead to confusions. It should be removed. If this variable is necessary, name the variable `_` or start the name with `unused` or `_unused`."
python,PYL-W0614,Unused import from wildcard import found,major,antipattern,"In a wildcard import, all public names defined in the module are imported. It is advised to explicitly import the values needed or modify the module being imported from and define __all__ to restrict the names to be imported. "
python,PYL-W0621,Re-defined variable from outer scope,major,antipattern,"Local variable name hides the variable defined in the outer space, making it inaccesible. It may cause confusion."
python,PYL-W0622,Re-definition found for builtin function,critical,antipattern,Defining a local variable or function with the same name as a built-in object makes the built-in object unusable within the current scope and makes the code more difficult to read.
python,PYL-W0623,redefine-in-handler,,,
python,PYL-W0631,Loop variable used outside the loop,critical,bug-risk, Do not use a loop variable (i.e. defined by a for loop or a list comprehension or a generator expression) outside the loop. It can induce wrong results.
python,PYL-W0632,Unbalanced tuple unpacking,major,bug-risk,Possible unbalanced tuple unpacking detected: either left or right side of the statement has more labels. This can raise `ValueError` while unpacking.
python,PYL-W0640,cell-var-from-loop,,,
python,PYL-W0641,possibly-unused-variable,,,
python,PYL-W0642,Assignment to `self` or `cls` detected,major,bug-risk,Assignment to `self` and `cls` is invalid and strongly discouraged. Doing so can cause errors when accessing the object or the class.
python,PYL-W0703,Exception caught is very general,major,antipattern,"If the except block catches a very general exception, it is likely to include many unrelated errors too. Try to be more precise while catching the exception."
python,PYL-W0705,Catching previously caught exception,critical,bug-risk,"In a `try` block, one type of exception shall be caught only once. Do not catch the same exception again."
python,PYL-W0706,Except handler raises immediately,critical,bug-risk,Using `raise` as the first or only operator of an except handler is useless because it raises back the exception immediately. Remove the `raise` operator or the entire `try-except-raise` block.
python,PYL-W0711,Exception to catch is the result of a binary operation,critical,bug-risk,"Do not use binary operations (or, and) to catch exceptions. If intending to catch multiple exceptions, rewrite as ""except (A, B):"""
python,PYL-W0715,Exception arguments suggest string formatting might be intended,major,antipattern,"Found multiple arguments to an exception constructor, the first of them a string literal containing what appears to be placeholders intended for formatting. In this case, it is recommended to format the message properly."
python,PYL-W1113,Keyword argument defined before variable positional arguments,minor,antipattern,"On defining a keyword argument before variable positional arguments, one can end up in having multiple values passed for the aforementioned parameter in case the method is called with keyword arguments. It is recommended to define keyword arguments after variable positional arguments. "
python,PYL-W1201,logging-not-lazy,,,
python,PYL-W1202,logging-format-interpolation,,,
python,PYL-W1203,logging-fstring-interpolation,,,
python,PYL-W1300,bad-format-string-key,,,
python,PYL-W1301,unused-format-string-key,,,
python,PYL-W1302,bad-format-string,,,
python,PYL-W1303,missing-format-argument-key,,,
python,PYL-W1304,unused-format-string-argument,,,
python,PYL-W1305,format-combined-specification,,,
python,PYL-W1306,missing-format-attribute,,,
python,PYL-W1307,invalid-format-index,,,
python,PYL-W1308,Duplicate string formatting argument found,minor,antipattern,String argument is repeating an argument. Consider passing arguments as named arguments.
python,PYL-W1401,Anomalous backslash detected,major,style,Backslash is present in the literal string but not as an escape. String constant might be missing an `r` prefix.
python,PYL-W1402,anomalous-unicode-escape-in-string,,,
python,PYL-W1403,implicit-str-concat-in-sequence,,,
python,PYL-W1501,Bad open mode for file,major,bug-risk,"The mode with which the file is opened is not valid. Python supports: r, w, a[, x] modes with b, +, and U (only with r) options."
python,PYL-W1502,boolean-datetime,,,
python,PYL-W1503,redundant-unittest-assert,,,
python,PYL-W1505,Method used has been deprecated,major,antipattern,The method is marked as deprecated and will be removed in a future version of Python. Consider looking for an alternative in the documentation.
python,PYL-W1506,bad-thread-instantiation,,,
python,PYL-W1507,shallow-copy-environ,,,
python,PYL-W1508,invalid-envvar-default,,,
python,PYL-W1509,subprocess-popen-preexec-fn,,,
python,PYL-W1601,apply-builtin,,,
python,PYL-W1602,basestring-builtin,,,
python,PYL-W1603,buffer-builtin,,,
python,PYL-W1604,cmp-builtin,,,
python,PYL-W1605,coerce-builtin,,,
python,PYL-W1606,execfile-builtin,,,
python,PYL-W1607,file-builtin,,,
python,PYL-W1608,long-builtin,,,
python,PYL-W1609,raw_input-builtin,,,
python,PYL-W1610,reduce-builtin,,,
python,PYL-W1611,standarderror-builtin,,,
python,PYL-W1612,unicode-builtin,,,
python,PYL-W1613,xrange-builtin,,,
python,PYL-W1614,coerce-method,,,
python,PYL-W1615,delslice-method,,,
python,PYL-W1616,getslice-method,,,
python,PYL-W1617,setslice-method,,,
python,PYL-W1618,no-absolute-import,,,
python,PYL-W1619,old-division,,,
python,PYL-W1620,dict-iter-method,,,
python,PYL-W1621,dict-view-method,,,
python,PYL-W1622,next-method-called,,,
python,PYL-W1623,metaclass-assignment,,,
python,PYL-W1624,indexing-exception,,,
python,PYL-W1625,raising-string,,,
python,PYL-W1626,reload-builtin,,,
python,PYL-W1627,oct-method,,,
python,PYL-W1628,hex-method,,,
python,PYL-W1629,nonzero-method,,,
python,PYL-W1630,cmp-method,,,
python,PYL-W1632,input-builtin,,,
python,PYL-W1633,round-builtin,,,
python,PYL-W1634,intern-builtin,,,
python,PYL-W1635,unichr-builtin,,,
python,PYL-W1636,map-builtin-not-iterating,,,
python,PYL-W1637,zip-builtin-not-iterating,,,
python,PYL-W1638,range-builtin-not-iterating,,,
python,PYL-W1639,filter-builtin-not-iterating,,,
python,PYL-W1640,using-cmp-argument,,,
python,PYL-W1641,eq-without-hash,,,
python,PYL-W1642,div-method,,,
python,PYL-W1643,idiv-method,,,
python,PYL-W1644,rdiv-method,,,
python,PYL-W1645,exception-message-attribute,,,
python,PYL-W1646,invalid-str-codec,,,
python,PYL-W1647,sys-max-int,,,
python,PYL-W1648,bad-python3-import,,,
python,PYL-W1649,deprecated-string-function,,,
python,PYL-W1650,deprecated-str-translate-call,,,
python,PYL-W1651,deprecated-itertools-function,,,
python,PYL-W1652,deprecated-types-field,,,
python,PYL-W1653,next-method-defined,,,
python,PYL-W1654,dict-items-not-iterating,,,
python,PYL-W1655,dict-keys-not-iterating,,,
python,PYL-W1656,Dictionary attribute `items()` referenced when not iterating,minor,antipattern,
python,PYL-W1657,Accessed a removed attribute on the operator module,major,bug-risk,The attribute you are trying to access has been removed in the version of Python you are using (Python 3). Please consult the documentation.
python,PYL-W1658,Accessed a removed attribute on the `urllib` module,major,bug-risk,This attribute of `urllib` module has been removed or moved to Python 3. Please consult the documentation.
python,PYL-W1659,Accessed the removed xreadlines attribute,major,bug-risk,This attribute has been removed in Python 3. Please consult the documentation.
python,PYL-W1660,Accessed a removed attribute on the `sys` module,major,bug-risk,This attribute of `sys` module has been removed in Python 3. Please consult the documentation.
python,PYL-W1661,Used an exception object that was bound by an except handler,major,bug-risk,"An exception, that was bound in an except handler, shall not be used outside of the except handler. On Python 3 these exceptions will be deleted once they get out of the except handler, and will give an error on being used."
python,PYL-W1662,Used a variable that was bound inside a comprehension,minor,bug-risk,"Accessed a variable, that was bound in a comprehension handler, outside of the comprehension itself. On Python 3 these variables will be deleted outside of the comprehension, and will give an error on being used."
python,PAP-W0006,Getter method detected in class,minor,antipattern,"Instead of having a method like `get_attribute`, it is recommended to use `@property` decorator to get the value of attribute."
python,PAP-W0007,Setter method detected in class,minor,antipattern,"Instead of having a set method to set the value of the attribute, it is recommended to use `@<attribute_name>.setter` decorator."
python,PAP-W0009,Multiple return types found in function,major,antipattern,"Returning objects of different types from a function can lead to problems that are difficult to debug. Instead, it is better to raise an exception that can be caught where the function is called."
python,PAP-W0010,File opened without the `with` statement,critical,antipattern,Opening a file using `with` statement is preferred as function `open` implements the context manager protocol that release the resource when it is outside of the `with` block. Not doing so requires you to manually release the resource.
python,PAP-W0011,Use `items()` to iterate over a dictionary,major,antipattern,"The preferred way to iterate over the key-value pairs of a dictionary is to declare two variables in a for loop, and then call `dictionary.items()` (or `dictionary.iteritems()` for Python2), where dictionary is the name of your variable representing a dictionary.'"
python,PAP-W0012,Use `get()` method to access values from a dictionary,major,antipattern,"In case of checking if key exists in the dictionary and then fetching the value, it is recommended to use the built-in method `dict.get(key[, default])`. This returns the respective value if key exists in the dictionary, else returns a default value, avoiding the dictionary lookup twice."
python,PAP-W0013,Debugger import detected,major,antipattern,Debuggers should only be used temporarily and locally. It is highly recommended not to leave debug statements in checked-in code.
python,PAP-W0014,Debugger activation detected,critical,antipattern,Debuggers should only be used temporarily and locally. It is highly recommended not to leave debug statements in checked-in code. This may cause your application to have unintended side-effects.
python,PAP-W0015,Unnecessary generator,,antipattern,"It is unnecessary to use `list`, `set`, `dict` around a generator expression to get object of that type, since there are comprehensions for these types."
python,PAP-W0016,Unnecessary comprehension,,antipattern,"Builtin functions like `all`, `any`, `enumerate`, `frozenset`, `iter`, `max`, `min`, `sum`, `tuple`, `itertools.cycle`, `itertools.accumulate`, can work directly with a generator expression. They do not require comprehension.

The inbuilt functions `all()` and `any()` in python also support short-circuiting, but this behaviour is lost if you use comprehension. This affects the performance. "
python,PAP-W0017,Redundant call,,antipattern,"It is unnecessary to use e.g. `list` around list comprehension, 'since it is equivalent without it.
Same goes for `set` and `dictionary` comprehensions."
python,PAP-W0018,Unnecessary literal,,antipattern,"It is unnecessary to use a `list` or `tuple` literal within a call to `tuple`, `list`, `set`, or `dict` since there is literal syntax for  these types."
python,PAP-W0019,Unnecessary call,,antipattern,"It is slower to call e.g. `dict()` than using the empty literal, because the name dict must be looked up in the global scope in case it has been rebound. Same for the other two basic types `list()` and `set()`."
python,PAP-W0020,Unnecessary typecast,,antipattern,Object is being type casted to the same type. This is unnecessary.
python,BAN-W1003,Audit required: Insecure hash function,,security,"MD2, MD4, MD5, SHA1 signature algorithms are known to be vulnerable to collision attacks. Attackers can exploit this to generate another certificate with the same digital signature, allowing them to masquerade as the affected service."
python,BAN-W1004,Audit required: Insecure cipher,,security,Cipher used is not secure. It is recommended to replace with a known secure cipher such as AES.
python,BAN-W1005,Audit required: Insecure cipher mode,,security,"Use of insecure cipher mode such as `ECB` is not recommended for use in cryptographic protocols at all.

In case of `ECB`, it encrypts identical plaintext blocks into identical ciphertext blocks; and does not hide data patterns well. In some senses, it doesn't provide serious message confidentiality.

Read more about different cipher modes here --
[https://cryptography.io/en/latest/hazmat/primitives/symmetric-encryption/#module-cryptography.hazmat.primitives.ciphers.modes](https://cryptography.io/en/latest/hazmat/primitives/symmetric-encryption/#module-cryptography.hazmat.primitives.ciphers.modes)"
python,PYL-W5198,New column added in database with a default value,major,performance,The prefered way is to add a new DB column with `null=True` because it will be created instantly and then possibly populate the table with the desired default values. Adding a default value will lead to a performance issue if the existing table has a large number of rows.
python,PYL-W5104,`exclude` used in a `ModelForm`,major,bug-risk,"It is recommended to use explicit fields instead of `exclude` in a `ModelForm`. This prevents accidentally setting fields, especially when adding new fields to a model."
python,PYL-R5101,`HttpResponse` used to return JSON response,major,antipattern,"It is recommended to use `JsonResponse` to return JSON data instead of HttpResponse.
`HttpResponse(json.dumps(data))` can be replaced with `JsonResponse(data)`, where `data` is a JSON-serializable object."
python,PYL-R5102,`HttpResponse()` returns `application/json` content type,major,antipattern,"It is recommended to use `JsonResponse` to return JSON content.
`HttpResponse(content_type='application/json)` can be replaced with just `JsonResponse()`."
python,PYL-R5103,Redundant `content_type` parameter for `JsonResponse()` detected,major,antipattern,"`JsonResponse()` contains `content_type` parameter. This is either redundant or the content_type is not JSON, which is probably an error."
python,PYL-E5101,Model's `__unicode__` is not callable,major,antipattern,Django models require a `__unicode__` method which must be callable.
python,PYL-W5101,Model missing `__unicode__` method,minor,antipattern,Django models should implement a `__unicode__ ` method for string representation.
python,PYL-W5102,Model has `__unicode__` method,major,antipattern,Django models should not implement a `__unicode__` method for string representation when using Python 3. Use `__str__` instead.
python,PYL-W5103,Model does not explicitly define `__unicode__`,minor,antipattern,"Django models should implement a `__unicode__` method for string representation.  A parent class of this model does, but ideally all models should be explicit."