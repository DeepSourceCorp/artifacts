go,GSC-G101,Potential hardcoded credentials,major,security,Potential hardcoded credential. Sensitive information like password shouldn't be hardcoded. Use an environment variable instead.
go,GSC-G102,Bind to all interfaces,major,security,"Binding to all network interfaces can potentially open up a service to traffic on unintended interfaces, that may not be properly documented or secured.

This can be prevented by changing the code so it explicitly only allows access from localhost, like `net.Listen(""tcp"",”127.0.0.1"")`"
go,GSC-G103,Function call made to an unsafe package,minor,security,Package unsafe contains operations that step around the type safety of Go programs and may be non-portable. Also note that `unsafe` package is not supported by [Go 1 compatibility guidelines](https://golang.org/doc/go1compat). Read in detail -- https://golang.org/pkg/unsafe/
go,GSC-G104,Missing error check,major,security,"The function returns an error, but this line does not check for it. If you don’t want to handle the error, throw a `panic`. Read more about error handling here -- https://blog.golang.org/error-handling-and-go"
go,GSC-G105,Audit the use of math/big.Exp function,minor,security,Use of math/big.Int.Exp function should be audited for modulus == 0
go,GSC-G106,Audit the use of ssh.InsecureIgnoreHostKey function,minor,security,InsecureIgnoreHostKey is used to accept any host key. It should not be used for production code.
go,GSC-G107,URL provided to HTTP request as taint input,minor,security,Potential HTTP request made with variable url. Getting an URL from an untrusted source gives the ability of an attacker to redirect your application to bad websites and perform additional attacks. Read more about Taint checking here -- https://en.wikipedia.org/wiki/Taint_checking
go,GSC-G201,SQL query construction using format string,critical,security,"Using the format string function in the fmt Golang package to dynamically create an SQL query can easily create a possibility for [SQL injection](https://en.wikipedia.org/wiki/SQL_injection). The reason is that the format string function doesn't escape special characters like ' and it's easy to add second SQL command in the format string.

Use `database/sql` package along with argument placeholders to construct SQL statements that are automatically escaped properly. The key distinction here is that you aren’t trying to construct the SQL statement yourself, but instead you are providing arguments that can be easily escaped. The underlying driver for database/sql will ultimately be aware of what special characters it needs to handle and will escape them for you, preventing any nefarious SQL from running.

## Example: 

```go
package main
 
import (
    ""database/sql""
    ""fmt""
 
    _ ""github.com/mattn/go-sqlite3""
)
 
func main() {
    db, _ := sql.Open(""sqlite3"", ""rc.db"")
    defer db.Close()
    db.Exec(`create table players (name, score, active, jerseyNum)`)
    db.Exec(`insert into players values ("""",0,0,""99"")`)
    db.Exec(`insert into players values ("""",0,0,""100"")`)
 
    // Parameterized SQL statement construction
    db.Exec(`update players set name=?, score=?, active=? where jerseyNum=?`,
        ""Smith, Steve"", 42, true, ""99"")
 
    rows, _ := db.Query(""select * from players"")
    var (
        name      string
        score     int
        active    bool
        jerseyNum string
    )
    for rows.Next() {
        rows.Scan(&name, &score, &active, &jerseyNum)
        fmt.Printf(""%3s %12s %3d %t\n"", jerseyNum, name, score, active)
    }
    rows.Close()
}
```"
go,GSC-G202,SQL query construction using string concatenation,critical,security,"Using string concatenation to dynamically create an SQL query can easily create a possibility for [SQL injection](https://en.wikipedia.org/wiki/SQL_injection). The reason is that the string concatenation function doesn't escape special characters like ' and it's easy to add second SQL command in the format string.

Use `database/sql` package along with argument placeholders to construct SQL statements that are automatically escaped properly. The key distinction here is that you aren’t trying to construct the SQL statement yourself, but instead you are providing arguments that can be easily escaped. The underlying driver for database/sql will ultimately be aware of what special characters it needs to handle and will escape them for you, preventing any nefarious SQL from running.

## Example: 

```go
package main
 
import (
    ""database/sql""
    ""fmt""
 
    _ ""github.com/mattn/go-sqlite3""
)
 
func main() {
    db, _ := sql.Open(""sqlite3"", ""rc.db"")
    defer db.Close()
    db.Exec(`create table players (name, score, active, jerseyNum)`)
    db.Exec(`insert into players values ("""",0,0,""99"")`)
    db.Exec(`insert into players values ("""",0,0,""100"")`)
 
    // Parameterized SQL statement construction
    db.Exec(`update players set name=?, score=?, active=? where jerseyNum=?`,
        ""Smith, Steve"", 42, true, ""99"")
 
    rows, _ := db.Query(""select * from players"")
    var (
        name      string
        score     int
        active    bool
        jerseyNum string
    )
    for rows.Next() {
        rows.Scan(&name, &score, &active, &jerseyNum)
        fmt.Printf(""%3s %12s %3d %t\n"", jerseyNum, name, score, active)
    }
    rows.Close()
}
```"
go,GSC-G203,Use of unescaped data in HTML templates,major,security,Potential unescaped data in HTML template. This might lead to [Cross site scripting](https://en.wikipedia.org/wiki/Cross-site_scripting). Do not use external values in the template without escaping.
go,GSC-G204,Audit use of command execution,major,security,"When executing a command,

- Do not use non literal values (or) variables in a command or argument.
- Make sure the execution path of a command is always absolute."
go,GSC-G301,Poor file permissions used when creating a directory,major,security,Excessive permissions granted when creating a file/directory. This warning is triggered whenever a permission greater than 0700 is granted.
go,GSC-G302,Poor file permissions used when creation file or using chmod,major,security,Excessive permissions granted to a file/directory. This warning is triggered whenever a permission greater than 0600 is granted.
go,GSC-G303,Creating tempfile using a predictable path,major,security,"When creating a temporary file, use `os.TempDir()` to get the name of the directory and `ioutil.TempFile()` to create a file -- instead of `os.Create`. Please note that it’s caller’s responsibility to remove the file."
go,GSC-G304,File path provided as taint input,major,security,Filepath with variable url. Getting an filepath from an untrusted source gives the ability of an attacker to perform arbitraty attacks. Read more about Taint checking here -- https://en.wikipedia.org/wiki/Taint_checking
go,GSC-G305,File path traversal when extracting zip archive,minor,security,"A path traversal attack (also known as directory traversal) aims to access files and directories that are stored outside the web root folder. By manipulating variables that reference files with “dot-dot-slash (../)” sequences and its variations or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system including application source code or configuration and critical system files.

The following is an example of a zip archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in /root/.ssh/ overwriting the authorized_keys file:

```
2018-04-29 10:00:00 .....           11           11  good_file.txt
2018-04-29 10:00:25 .....           20           20  ../../../../../../root/.ssh/authorized_keys
```

Package https://godoc.org/github.com/mholt/archiver handles sanitization of filepath.
Ref: https://github.com/mholt/archiver/blob/e4ef56d48eb029648b0e895bb0b6a393ef0829c3/archiver.go#L110-L119"
go,GSC-G401,"Potential usage of DES, RC4, MD5 or SHA1",major,security,"Consider using alternatives as DES, RC4, MD5 and SHA1 are relatively weak encryption algorithms."
go,GSC-G402,Potentially bad TLS connection settings detected,major,security,"Insecure configuration of TLS connection settings. Refer to the occurence to understand the exact misconfiguration.

The following configurations are flagged by our systems:
- `InsecureSkipVerify` set to `true` in TLS config -- https://golang.org/pkg/crypto/tls/#Config
- `MinVersion` or `MaxVersion` too low.
- Bad cipher suite used.

Refer to this compatibility document before making changes -- https://wiki.mozilla.org/Security/Server_Side_TLS#Modern_compatibility"
go,GSC-G403,RSA key length less than 2048 bits,major,security,"The strength of public-key-based cryptographic algorithm (like RSA) is determined by the time that it takes to derive the private key by using brute-force methods. RSA claims that 1024-bit keys are likely to become crackable some time between 2006 and 2010 and that 2048-bit keys are sufficient until 2030.

Increase the key length to atleast 2048 bits.

Read more about key size here -- https://en.wikipedia.org/wiki/Key_size"
go,GSC-G404,Audit the random number generation source (rand),major,security,"`math/rand` is much faster for applications that don’t need crypto-level or security-related random data generation. `crypto/rand` is suited for secure and crypto-ready usage, but it’s slower.

It is highly recommended to use `crypto/rand` when needing to be secure with random numbers such as generating session ID in a web application.

`crypto/rand` package -- https://golang.org/pkg/crypto/rand/
`math/rand` package -- https://golang.org/pkg/math/rand/

"
go,GSC-G501,Import blacklist: crypto/md5,major,security,"Detects imports of `crypto/md5` since they are considered vulnerable.

Refer to https://en.wikipedia.org/wiki/MD5#Collision_vulnerabilities to understand the vulnerability in detail."
go,GSC-G502,Import blacklist: crypto/des,major,security,"Detects imports of `crypto/des` since they are considered vulnerable.

Refer to https://paginas.fe.up.pt/~ei10109/ca/des-vulnerabilities.html to understand the vulnerability in detail."
go,GSC-G503,Import blacklist: crypto/rc4,major,security,"Detects imports of `crypto/rc4` since it is considered vulnerable.

Refer https://en.wikipedia.org/wiki/RC4 to understand the vulnerability in detail."
go,GSC-G504,Import blacklist: net/http/cgi,major,security,"Detects imports of `net/http/cgi` since it is considered vulnerable.

Refer to http://phrack.org/issues/49/8.html to understand the vulnerability in detail."
go,GSC-G505,Import blacklist: crypto/sha1,major,security,"Detects imports of `crypto/sha1` since they are considered vulnerable.

Refer to https://en.wikipedia.org/wiki/SHA-1#Attacks to understand the vulnerability in detail."
go,SCC-S1000,Use plain channel send or receive,major,antipattern,"Select statements with a single case can be replaced with a simple send or receive. 

Bad pattern: 
```
select {
case x := <-ch:
    fmt.Println(x)
}
```

Good pattern: 
```
x := <-ch
fmt.Println(x)
```"
go,SCC-S1001,Replace `for` loop with call to `copy`,major,antipattern,"Use `copy()` for copying elements from one slice to another.

Bad pattern: 
```
for i, x := range src {
    dst[i] = x
}
```

Good pattern:
```
copy(dst, src)
```

The built-in [copy](https://golang.org/ref/spec#Appending_and_copying_slices) copies elements into a destination slice `dst` from a source slice `src`.

```
func copy(dst, src []Type) int
```

It returns the number of elements copied, which will be the minimum of `len(dst) `and `len(src)`. The result does not depend on whether the arguments overlap."
go,SCC-S1002,Omit comparison with boolean constant,minor,antipattern,"Comparing with boolean constant is unnecessary. The actual problem could also be how the variable is named.

Bad pattern:
```
if isUserLoggedIn == true {}
```

Good pattern:
```
After: 
if isUserLoggedIn {}
```"
go,SCC-S1003,"Replace call to `strings.Index` with `strings.Contains`
",major,antipattern,"`strings.Contains(x, y)` could be simplified as `strings.Index(x, y) != -1 {}`

Bad pattern:
```
if strings.Index(x, y) != -1 {}
```

Good pattern:
``` 
if strings.Contains(x, y) {}
```"
go,SCC-S1004,Replace call to bytes.Compare with bytes.Equal,major,antipattern,"Bad pattern: 
```
if bytes.Compare(x, y) == 0 {}
```

Good pattern:
```
if bytes.Equal(x, y) {}
```"
go,SCC-S1005,Drop unnecessary use of the blank identifier,major,antipattern,"Assigning to the blank identifier is unnecessary.

Bad patterns: 
```
for _ = range slc {}

x, _ = someMap[key]

_ = <-ch
```

Good patterns:
```
for range slc {}

x = someMap[key]

<-ch
```
"
go,SCC-S1006,Use for { ... } for infinite loops,major,antipattern,"For infinite loops, using `for { ... }` is the most idiomatic choice."
go,SCC-S1007,Simplify regular expression by using raw string literal,major,antipattern,"Raw string literals use `\`` instead of `’` and thus, do not support any escape sequences. This means that the backslash (\) can be used freely, without the need of escaping.

Since regular expressions have their own escape sequences, raw strings can improve their readability. 

Bad pattern: 
```
regexp.Compile(""\\A(\\w+) profile: total \\d+\\n\\z"")
```

Good pattern:
``` 
regexp.Compile(`\A(\w+) profile: total \d+\n\z`)
```"
go,SCC-S1008,Simplify returning boolean expression,major,antipattern,"Instead of returning boolean expression, returning the expression itself simplifies the code.

Bad pattern:
```
if <expr> {
    return true
}

return false
```

Good pattern:
```
After: 
return <expr>
```"
go,SCC-S1009,Omit redundant `nil` check on slices,major,antipattern,"The `len` function is defined for all slices, even `nil` ones, which have a length of zero.

It is not necessary to check if a slice is not nil before checking that its length is not zero.

Bad pattern:
``` 
if x != nil && len(x) != 0 {}
```

Good pattern:
``` 
if len(x) != 0 {}
```"
go,SCC-S1010,Omit default slice index,major,antipattern,"When slicing, the second index defaults to the length of the value, making `s[n:len(s)]` and `s[n:]` equivalent.

Bad pattern:
```
s[n:len(s)]`
```

Good pattern:
```
s[n:]
```
"
go,SCC-S1011,Use a single append to concatenate two slices,major,antipattern,"When appending two slices into one, there is no need to range over the source slice. Rather, use `append(sliceOne, sliceTwo…)

Bad pattern:
``` 
for _, v := range sliceTwo {
    x = append(sliceOne, v)
}
```

Good pattern:
``` 
x = append(sliceOne, sliceTwo…)
```"
go,SCC-S1012,Replace `time.Now().Sub(x)` with `time.Since(x)`,major,antipattern,"The `time.Since` helper has the same effect as using `time.Now().Sub(x)` but is easier to read.

Bad pattern:
``` 
time.Now().Sub(x)
```

Good pattern:
``` 
time.Since(x)
```"
go,SCC-S1013,Use a type conversion instead of manually copying struct fields,major,antipattern,"Two struct types with identical fields can be converted between each other. In older versions of Go, the fields had to have identical struct tags. Since Go 1.8, however, struct tags are ignored during conversions. It is thus not necessary to manually copy every field individually.

Bad pattern:
``` 
var x T1
y := T2{
    Field1: x.Field1,
    Field2: x.Field2,
}
```

Good pattern:
``` 
var x T1
y := T2(x)
```"
go,SCC-S1014,Replace manual trimming with `strings.TrimPrefix`,major,antipattern,"Instead of using `strings.HasPrefix` and manual slicing, use the `strings.TrimPrefix` function. If the string doesn't start with the prefix, the original string will be returned.

Using `strings.TrimPrefix` reduces complexity, and avoid mistakes such as [off-by-one](https://en.wikipedia.org/wiki/Off-by-one_error).

Bad pattern:
``` 
if strings.HasPrefix(str, prefix) {
    str = str[len(prefix):]
}
```

Good pattern:
``` 
str = strings.TrimPrefix(str, prefix)
```"
go,SCC-S1015,Use `copy()` for sliding elements,major,antipattern,"`copy()` permits using the same source and destination slice, even with overlapping ranges. This makes it ideal for sliding elements in a slice.

Bad pattern: 
```
for i := 0; i < n; i++ {
    x[i] = x[offset+i]
}
```

Good pattern:
``` 
copy(x[:n], x[offset:])
```"
go,SCC-S1016,Simplify `make` call by omitting redundant arguments,major,antipattern,"The `make` function has default values for the length and capacity arguments.

- For channels and maps, the length defaults to zero.
- For slices the capacity defaults to the length.
"
go,SCC-S1017,Omit redundant `nil` check in type assertion,major,antipattern,"When performing type assertion, there is no need to check for `nil` as it is implicitly handled.

Bad pattern:
``` 
if _, ok := i.(T); ok && i != nil {}
```

Good pattern:
``` 
if _, ok := i.(T); ok {}
```"
go,SCC-S1018,Merge variable declaration and assignment,major,antipattern,"Declaring and assigning variables can be done together, simplifying the code.

Bad pattern:
``` 
var x uint
x = 1
```

Good pattern:
``` 
var x uint = 1
```"
go,SCC-S1019,Omit redundant control flow,major,antipattern,"Omit unnecessary (or) redundant control flows.

### Functions that have no return value do not need a return statement as the final statement of the function. Both the examples below act the same.

Bad pattern:
```
func foo() {
	fmt.Println(""foo"")
	return
}
```

Good pattern:
```
func foo() {
	fmt.Println(""foo"")
}
```

### `switch` statement in Go do not have automatic fallthrough, unlike languages like C. It is not necessary to have a break statement as the final statement in a case block. Both the examples below act the same.

Bad pattern:
```
switch 1 {
  case 1:
    fmt.Println(“case one“)
    break
  case 2:
    fmt.Println(“case two“)
}
```

Good pattern:
```
switch 1 {
  case 1:
    fmt.Println(“case one“)
  case 2:
    fmt.Println(“case two“)
}
```
"
go,SCC-S1020,Replace `x.Sub(time.Now())` with `time.Until(x)`,major,antipattern,"The `time.Until` helper has the same effect as using `x.Sub(time.Now())`. The former is easier to read.

Bad pattern:
``` 
x.Sub(time.Now())
```

Good pattern:
``` 
time.Until(x)
```"
go,SCC-S1021,"Don't use `fmt.Sprintf(""%s"", x)` unnecessarily",major,antipattern,"In many instances, there are easier and more efficient ways of getting a value's string representation. Whenever a value's underlying type is a string already, or the type has a String method, they should be used directly. 

Given the following shared definitions,

```
type T1 string
type T2 int

func (T2) String() string { return ""Hello, world"" }

var x string
var y T1
var z T2
```

Bad pattern:
```
fmt.Sprintf(""%s"", x)
fmt.Sprintf(""%s"", y)
fmt.Sprintf(""%s"", z)
```

Good pattern:
```
x
string(y)
z.String()
```"
go,SCC-S1022,"Simplify error construction with `fmt.Errorf`
",major,antipattern,"Error construction could be simplified by using `fmt.Errorf(…)`

Bad pattern:
``` 
errors.New(fmt.Sprintf(...))
```

Good pattern:
``` 
fmt.Errorf(...)
```"
go,SCC-S1023,Range over the string directly,major,antipattern,"Ranging over a string will yield byte offsets and runes. If the offset isn't used, this is functionally equivalent to converting the string to a slice of runes and ranging over that. Ranging directly over the string will be more performant, however, as it avoids allocating a new slice, the size of which depends on the length of the string. 

Bad pattern:
``` 
for _, r := range []rune(s) {}
```

Good pattern:
``` 
for _, r := range s {}
```"
go,SCC-S1024,Use `bytes.Buffer.String` or `bytes.Buffer.Bytes`,major,antipattern,"`bytes.Buffer` has both a `String` and a `Bytes` method. It is unnecessary to use `string(buf.Bytes())` or `[]byte(buf.String())` – simply use the other method. 

Bad pattern:
```
string(buf.Bytes())
```

Good pattern:
```
buf.String()
```
"
go,SCC-S1025,Omit redundant `nil` check around loop,major,antipattern,"When using `range` on nil slices and maps, the loop will simply never execute. This makes an additional nil check around the loop unnecessary. 

Bad pattern:
```
if s != nil {
    for _, x := range s {
        ...
    }
}
```

Good pattern:
``` 
for _, x := range s {
    ...
}
```"
go,SCC-S1026,"Use `sort.Ints(x)`, `sort.Float64s(x)`, and `sort.Strings(x)`",major,antipattern,"The `sort.Ints`, `sort.Float64s` and `sort.Strings` functions are easier to read than `sort.Sort(sort.IntSlice(x))`, `sort.Sort(sort.Float64Slice(x))` and `sort.Sort(sort.StringSlice(x))`.

Bad pattern:
``` 
sort.Sort(sort.StringSlice(x))
```

Good pattern:
``` 
sort.Strings(x)
```"
go,SCC-S1027,Unnecessary guard around call to `delete`,major,antipattern,Calling delete on a nil map is a [no-op](https://en.wikipedia.org/wiki/NOP_(code)). The command does nothing. You may safely remove this.
go,SCC-S1028,Use result of type assertion to simplify cases,major,antipattern,Use result of type assertion to simplify cases.
go,SCC-S1029,Redundant call to `net/http.CanonicalHeaderKey` in method call on `net/http.Header`,major,antipattern,"The methods on `net/http.Header`, namely `Add`, `Del`, `Get` and `Set`, already canonicalize the given header name. "
go,SCC-S1030,Invalid regular expression,critical,bug-risk,Invalid regular expression. This poses potential bug/security risk. Validate the regex here -- [https://regex101.com/](https://regex101.com/)
go,SCC-S1031,Invalid template,critical,bug-risk,Invalid `text` or `html` template. This poses potential bug risk.
go,SCC-S1032,Invalid format in `time.Parse`,critical,bug-risk,Go won't be able to parse this time format as it is invalid. Cross check the time format.
go,SCC-S1033,Unsupported argument to functions in `encoding/binary`,major,bug-risk,"The [encoding/binary](https://golang.org/pkg/encoding/binary/) package can only serialize types with known sizes. This precludes the use of the `int` and `uint` types, as their sizes differ on different architectures. Furthermore, it doesn't support serializing maps, channels, strings, or functions.

Before Go 1.8, bool wasn't supported, either."
go,SCC-S1034,Suspiciously small untyped constant in `time.Sleep`,major,bug-risk,"The `time.Sleep` function takes a `time.Duration` as its only argument. Durations are expressed in nanoseconds. Thus, calling time.Sleep(1) will sleep for 1 nanosecond. This is a common source of bugs, as sleep functions in other languages often accept seconds or milliseconds.

The [time](https://golang.org/pkg/time/) package provides constants such as `time.Second` to express large durations. These can be combined with arithmetic to express arbitrary durations, for example '5 * time.Second' for 5 seconds.

If you truly meant to sleep for a tiny amount of time, use 'n * time.Nanosecond’."
go,SCC-S1035,Invalid first argument to exec.Command,major,bug-risk,"[os/exec](https://golang.org/pkg/os/exec/) runs programs directly (using variants of the fork and exec system calls on Unix systems). This shouldn't be confused with running a command in a shell. The shell will allow for features such as input redirection, pipes, and general scripting. The shell is also responsible for splitting the user's input into a program name and its arguments. For example, the equivalent to

```
ls -la /home
```
would be 

```
exec.Command(""ls"", “-la”, “/home”)
```

If you want to run a command in a shell, consider using something like the following – but be aware that not all systems, particularly Windows, will have a /bin/sh program:

```
exec.Command(""/bin/sh"", ""-c"", ""ls -la /home”)
```
"
go,SCC-S1036,Printf with dynamic first argument and no further arguments,major,bug-risk,"Using `fmt.Printf` with a dynamic first argument can lead to unexpected output. The first argument is a format string, where certain character combinations have special meaning. If, for example, a user were to enter a string such as

```
Interest rate: 5%
```

and you printed it with

```
fmt.Printf(s)
```

.. it would lead to the following output: 
```
Interest rate: 5%!(NOVERB).
```

Similarly, forming the first parameter via string concatenation with user input should be avoided for the same reason. When printing user input, either use a variant of `fmt.Print`, or use the `%s` Printf verb and pass the string as an argument. 
"
go,SCC-S1037,Invalid URL in `net/url.Parse`,major,bug-risk,Invalid URL format. [net/URL](https://golang.org/pkg/net/url/#URL.Parse) will fail to parse this URL. Fix this by updating a valid URL.
go,SCC-S1038,Non-canonical key in `http.Header` map,major,bug-risk,"Keys in `http.Header` maps are canonical, meaning they follow a specific combination of uppercase and lowercase letters. Methods such as `http.Header.Add` and `http.Header.Del` convert inputs into this canonical form before manipulating the map.

When manipulating `http.Header` maps directly, as opposed to using the provided methods, care should be taken to stick to canonical form in order to avoid inconsistencies. The following piece of code demonstrates one such inconsistency:

```
h := http.Header{}
h[""etag""] = []string{""1234""}
h.Add(""etag"", ""5678"")
fmt.Println(h)
```

.. results in,

```
// Output:
// map[Etag:[5678] etag:[1234]]
```

The easiest way of obtaining the canonical form of a key is to use [http.CanonicalHeaderKey](https://golang.org/pkg/net/http/#CanonicalHeaderKey)"
go,SCC-S1039,"(*regexp.Regexp).FindAll called with n == 0, which will always return zero results",major,bug-risk,"If n >= 0, the function returns at most n matches/submatches. To return all results, specify a negative number. 
"
go,SCC-S1040,Invalid `UTF-8` value provided,major,bug-risk,"Various methods in the [strings](https://golang.org/pkg/strings/) package expect valid UTF-8, but invalid input is provided"
go,SCC-S1041,Nil `context.Context` passed to function,major,bug-risk,"A nil `context.Context` is being passed to a function, consider using [context.TODO](https://golang.org/pkg/context/#TODO) instead."
go,SCC-S1042,"io.Seeker.Seek is being called with the whence constant as the first argument, but it should be the second",major,bug-risk,"Mispositioned `whence` constant in `io.Seeker.Seek` call

[io.Seeker.Seek](https://golang.org/pkg/io/#Seeker) is being called with the `whence` constant as the first argument, but it should be the second.

```
type Seeker interface {
        Seek(offset int64, whence int) (int64, error)
}
```
"
go,SCC-S1043,Non-pointer value passed to Unmarshal or Decode,major,bug-risk,`Unmarshal` and `Decode` methods accept pointer value. Passing non-pointer value causes an error.
go,SCC-S1044,`time.Tick` used in leaky way,major,performance,"Using `time.Tick` in a way that will leak. Consider using time.NewTicker, and only use time.Tick in tests, commands and endless functions."
go,SCC-S1045,Trapping a signal that cannot be trapped,minor,antipattern,"Not all signals can be intercepted by a process. Speficially, on UNIX-like systems, the `syscall.SIGKILL` and `syscall.SIGSTOP` signals are never passed to the process, but instead handled directly by the kernel. It is therefore pointless to try and handle these signals."
go,SCC-S1046,Channels used with `signal.Notify` should be buffered,major,bug-risk,"The [os/signal](https://golang.org/pkg/os/signal/) package uses non-blocking channel sends when delivering signals. If the receiving end of the channel isn't ready and the channel is either unbuffered or full, the signal will be dropped.

To avoid missing signals, the channel should be buffered and of the appropriate size. For a channel used for notification of just one signal value, a buffer of size 1 is sufficient.
"
go,SCC-S1047,"`strings.Replace` called with `n == 0`, which does nothing",major,bug-risk,"With `n == 0`, zero instances will be replaced. To replace all instances, use a negative number, or use `strings.ReplaceAll`."
go,SCC-S1048,"Using a deprecated function, variable, constant or field",major,bug-risk,
go,SCC-S1049,Using an invalid host:port pair with a net.Listen-related function,,,
go,SCC-S1050,Using bytes.Equal to compare two net.IP,,,
go,SCC-S1051,Modifying the buffer in an io.Writer implementation,,,
go,SCC-S1052,"A string cutset contains duplicate characters, suggesting TrimPrefix or TrimSuffix should be used instead of TrimLeft or TrimRight",,,
go,SCC-S1053,it is not possible to use Reset's return value correctly,,,
go,SCC-S1054,Concurrency issues,,,
go,SCC-S1055,"sync.WaitGroup.Add called inside the goroutine, leading to a race condition",,,
go,SCC-S1056,"Empty critical section, did you mean to defer the unlock?",,,
go,SCC-S1057,"Called testing.T.FailNow or SkipNow in a goroutine, which isn't allowed",,,
go,SCC-S1058,"Deferred Lock right after locking, likely meant to defer Unlock instead",,,
go,SCC-S1059,Testing issues,,,
go,SCC-S1060,"TestMain doesn't call os.Exit, hiding test failures",,,
go,SCC-S1061,Assigning to b.N in benchmarks distorts the results,,,
go,SCC-S1062,Code that isn't really doing anything,,,
go,SCC-S1063,Boolean expression has identical expressions on both sides,,,
go,SCC-S1064,"&*x gets simplified to x, it does not copy x",,,
go,SCC-S1065,Comparing strings with known different sizes has predictable results,,,
go,SCC-S1066,Comparing unsigned values against negative values is pointless,,,
go,SCC-S1067,The loop exits unconditionally after one iteration,,,
go,SCC-S1068,Field assignment that will never be observed. Did you mean to use a pointer receiver?,,,
go,SCC-S1069,A value assigned to a variable is never read before being overwritten. Forgotten error check or dead code?,,,
go,SCC-S1070,"The variable in the loop condition never changes, are you incrementing the wrong variable?",,,
go,SCC-S1071,A function argument is overwritten before its first use,,,
go,SCC-S1072,The result of append will never be observed anywhere,,,
go,SCC-S1073,Break statement with no effect. Did you mean to break out of an outer loop?,,,
go,SCC-S1074,Comparing a value against NaN even though no value is equal to NaN,,,
go,SCC-S1075,"Negating a boolean twice (!!b) is the same as writing b. This is either redundant, or a typo.",,,
go,SCC-S1076,"An if/else if chain has repeated conditions and no side-effects; if the condition didn't match the first time, it won't match the second time, either",,,
go,SCC-S1077,Calling functions like math.Ceil on floats converted from integers doesn't do anything useful,,,
go,SCC-S1078,"Certain bitwise operations, such as x ^ 0, do not do anything useful",,,
go,SCC-S1079,"A pure function's return value is discarded, making the call pointless",,,
go,SCC-S1080,Self-assignment of variables,,,
go,SCC-S1081,"Multiple, identical build constraints in the same file",,,
go,SCC-S1082,Unreachable case clause in a type switch,,,
go,SCC-S1083,x = append(y) is equivalent to x = y,,,
go,SCC-S1084,Correctness issues,,,
go,SCC-S1085,Assignment to nil map,,,
go,SCC-S1086,Defering Close before checking for a possible error,,,
go,SCC-S1087,The empty for loop (for {}) spins and can block the scheduler,,,
go,SCC-S1088,Defers in infinite loops will never execute,,,
go,SCC-S1089,for { select { ... with an empty default branch spins,,,
go,SCC-S1090,"The finalizer references the finalized object, preventing garbage collection",,,
go,SCC-S1091,Slice index out of bounds,,,
go,SCC-S1092,Infinite recursive call,,,
go,SCC-S1093,Performance issues,,,
go,SCC-S1094,"Using regexp.Match or related in a loop, should use regexp.Compile",,,
go,SCC-S1095,Missing an optimization opportunity when indexing maps by byte slices,,,
go,SCC-S1096,Storing non-pointer values in sync.Pool allocates memory,,,
go,SCC-S1097,Converting a string to a slice of runes before ranging over it,,,
go,SCC-S1098,Inefficient string comparison with strings.ToLower or strings.ToUpper,,,
go,SCC-S1099,Dubious code constructs that have a high probability of being wrong,,,
go,SCC-S1100,defers in for range loops may not run when you expect them to,,,
go,SCC-S1101,Using a non-octal os.FileMode that looks like it was meant to be in octal.,,,
go,SCC-S1102,Empty body in an if or else branch,,,
go,SCC-S1103,Only the first constant has an explicit type,,,
go,SCC-S1104,Trying to marshal a struct with no public fields nor custom marshaling,,,
go,SCC-S1105,,,,
go,SCC-S1106,Incorrect or missing package comment,,,
go,SCC-S1107,Dot imports are discouraged,,,
go,SCC-S1108,Poorly chosen identifier,,,
go,SCC-S1109,Incorrectly formatted error string,,,
go,SCC-S1110,Poorly chosen receiver name,,,
go,SCC-S1111,A function's error value should be its last return value,,,
go,SCC-S1112,Poorly chosen name for variable of type time.Duration,,,
go,SCC-S1113,Poorly chosen name for error variable,,,
go,SCC-S1114,"Should use constants for HTTP error codes, not magic numbers",,,
go,SCC-S1115,A switch's default case should be the first or last case,,,
go,SCC-S1116,Use consistent method receiver names,,,
go,SCC-S1117,Don't use Yoda conditions,,,
go,SCC-S1118,Avoid zero-width and control characters in string literals,,,
go,SCC-S1119,Unused code,,,
go,SCC-S1120,Unused code,,,