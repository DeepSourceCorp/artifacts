syntax = "proto3";

package beacon;

// placeholder message
message Empty {}

// Authorization request message
message AuthRequest {
    // The Beacon API key for the team or user account
    // This is auto-generated by DeepSource.
    string beacon_api_key = 1;

    // The unique project identifier for this application
    // This is auto-generated by DeepSource.
    string project_id = 2;

    // Version of the Beacon client sending this message
    string beacon_client_version = 3;

    // Source version of the application
    // This could be a version control string, like Git's SHA
    string source_version = 4;

    // Host's name where the application is running
    string hostname = 5;
}

// Authorization response message
message AuthResponse {
    // The unique stream identifier for an established stream
    string stream_id = 1;
}

// An individual event's frequency aggregation
message Event {
    // The relative path of the file where this event occurred
    string file_path = 1;

    // The location in the file where the event occurred
    int64 location = 2;

    // Count of these events, aggregated over a time period
    int64 count = 3;
}

// A batch of events sent to Beacon server
message Batch {
    // The stream_id that is returned after the authentication
    string stream_id = 1;

    // Type of events in this batch
    enum Type {
        f = 0;  // a function call
        e = 1;  // an exception
    }
    Type event_type = 2;

    // list of events that are to be sent in this batch
    repeated Event events = 3;

    // ISO-8601 date-time string in UTC, denoting the starting time of the
    // first tracked event in this batch
    string start_time = 4;

    // ISO-8601 date-time string in UTC, denoting the starting time of the
    // last tracked event in this batch
    string end_time = 5;
}

service Beacon {
    // make an initialization request for transmission
    rpc InitializeStream (AuthRequest) returns (AuthResponse) {}

    // flush a batch to the server
    rpc Transmit (Batch) returns (Empty) {}
}
