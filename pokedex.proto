syntax="proto3";
package proto;

// Placeholder params used in places where function params
// aren't required but gRPC mandates to have a namesake one
message Empty {}

// Analyzer
message Analyzer {
  // @inject_tag: db:"id"
  int64 id = 1;

  // @inject_tag: db:"name"
  string name = 2;

  // @inject_tag: db:"description"
  string description = 3;

  // @inject_tag: db:"shortcode"
  string shortcode = 4;

  // @inject_tag: db:"analyzer_type"
  string analyzer_type = 5;

  // @inject_tag: db:"archived"
  bool archived = 7;

  // @inject_tag: db:"created"
  string created = 8;

  // @inject_tag: db:"updated"
  string updated = 9;
}

// Array of analyzers
message Analyzers {
  repeated Analyzer analyzers = 1;
}

// Tag
message Tag {
  // @inject_tag:db:"slug"
  string slug = 1;
}

// Array of tags
message Tags {
  repeated Tag tags = 1;
}

// Issue
message Issue {
  // @inject_tag: db:"id"
  int64 id = 1;

  // @inject_tag: db:"category"
  string category = 2;

  // @inject_tag: db:"issue_type"
  string issue_type = 3;

  // @inject_tag: db:"name"
  string name = 4;

  // @inject_tag: db:"description"
  string description = 8;

  // @inject_tag: db:"severity"
  string severity = 9;

  // @inject_tag: db:"analyzer_shortcode"
  string analyzer_shortcode = 10;

  // @inject_tag: db:"archived"
  bool archived = 11;

  // @inject_tag: db:"created"
  string created = 12;

  // @inject_tag: db:"updated"
  string updated = 13;
}

// Array of issues
message Issues {
  repeated Issue issues = 1;
}

// Analyzer and tag metadata
message AnalyzerTag {
  // @inject_tag:db:"analyzer_shortcode"
  string analyzer_shortcode = 1;

  // @inject_tag:db:"tag_slug"
  string tag_slug = 2;
}

// Analyzer and issue metadata
message AnalyzerIssue {
  string analyzer_shortcode = 1;
  string issue_name = 2;
}

// Enums
message Enums {
  repeated string enums = 1;
}

// Enum name
message EnumName {
  string enum_name = 1;
}

service Registry {
  // List enums
  rpc ListEnums (EnumName) returns (Enums) {}

  // Create analyzer
  rpc CreateAnalyzer (Analyzer) returns (Analyzer) {}

  // Update analyzer
  rpc UpdateAnalyzer (Analyzer) returns (Analyzer) {}

  // List analyzers
  rpc ListAnalyzers (Empty) returns (Analyzers) {}

  // Get analyzer by shortcode
  rpc GetAnalyzerByShortcode (Analyzer) returns (Analyzer) {}

  // Create issue
  rpc CreateIssue (Issue) returns (Issue) {}

  // Update issue
  rpc UpdateIssue (Issue) returns (Issue) {}

  // List issues of analyzer
  rpc ListIssuesOfAnalyzer (Analyzer) returns (Issues) {}

  // Get issue by ID
  rpc GetIssueByID (Issue) returns (Issue) {}

  // List all tags
  rpc ListAllTags (Empty) returns (Tags) {}

  // List tags of analyzer
  rpc ListTagsOfAnalyzer (Analyzer) returns (Tags) {}

  // Add tag to analyzer
  rpc AddTagToAnalyzer (AnalyzerTag) returns (Tag) {}

  // Remove tag from analyzer
  rpc RemoveTagFromAnalyzer (AnalyzerTag) returns (Tag) {}

  // Get issue by analyzer shortcode and issue name
  rpc GetIssueByAnalyzerShortcodeAndIssueName (AnalyzerIssue) returns (Issue) {}
}
